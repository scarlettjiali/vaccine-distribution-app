(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react')) :
  typeof define === 'function' && define.amd ? define(['exports', 'react'], factory) :
  (global = global || self, factory(global.bumaga = {}, global.React));
}(this, (function (exports, React) { 'use strict';

  var React__default = 'default' in React ? React['default'] : React;

  function useConstant(fn) {
    var ref = React.useRef();

    if (!ref.current) {
      ref.current = {
        v: fn()
      };
    }

    return ref.current.v;
  }

  const TabsState = React.createContext();
  const Elements = React.createContext();
  const Tabs = ({
    state: outerState,
    children
  }) => {
    const innerState = React.useState(0);
    const elements = useConstant(() => ({
      tabs: 0,
      panels: 0
    }));
    const state = outerState || innerState;
    return React__default.createElement(Elements.Provider, {
      value: elements
    }, React__default.createElement(TabsState.Provider, {
      value: state
    }, children));
  };
  const useTabState = () => {
    const [activeIndex, setActive] = React.useContext(TabsState);
    const elements = React.useContext(Elements);
    const tabIndex = useConstant(() => {
      const currentIndex = elements.tabs;
      elements.tabs += 1;
      return currentIndex;
    });
    const onClick = useConstant(() => () => setActive(tabIndex));
    const state = React.useMemo(() => ({
      isActive: activeIndex === tabIndex,
      onClick
    }), [activeIndex, onClick, tabIndex]);
    return state;
  };
  const usePanelState = () => {
    const [activeIndex] = React.useContext(TabsState);
    const elements = React.useContext(Elements);
    const panelIndex = useConstant(() => {
      const currentIndex = elements.panels;
      elements.panels += 1;
      return currentIndex;
    });
    return panelIndex === activeIndex;
  };
  const Tab = ({
    children
  }) => {
    const state = useTabState();

    if (typeof children === 'function') {
      return children(state);
    }

    return React.isValidElement(children) ? React.cloneElement(children, state) : children;
  };
  const Panel = ({
    active,
    children
  }) => {
    const isActive = usePanelState();
    return isActive || active ? children : null;
  };

  exports.Panel = Panel;
  exports.Tab = Tab;
  exports.Tabs = Tabs;
  exports.usePanelState = usePanelState;
  exports.useTabState = useTabState;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
