{"ast":null,"code":"import { useEffect, useState, memo } from 'react';\nimport { geoCentroid } from 'd3-geo';\nimport { scaleQuantize } from \"d3-scale\";\nimport { ComposableMap, Geographies, Geography, Marker, Annotation } from 'react-simple-maps';\nimport ReactTooltip from 'react-tooltip';\nimport allStates from '../data/allstates.json';\nconst geoUrl = 'https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json';\nconst offsets = {\n  VT: [50, -8],\n  NH: [34, 2],\n  MA: [30, -1],\n  RI: [28, 2],\n  CT: [35, 10],\n  NJ: [34, 1],\n  DE: [33, 0],\n  MD: [47, 10],\n  DC: [49, 21]\n};\nconst colorScale = scaleQuantize().domain([0, 1000]).range([\"#b0b8d0\", \"#a79bd5\", \"#9880d1\", \"#8667c9\", \"#7250bc\", \"#5c3aac\", \"#442599\", \"#2a1285\", \"#000070\"]);\n\nconst MapChart = props => {\n  console.log(\"----\", props); // useEffect(() => {\n  //     ReactTooltip.rebuild();\n  // }, []);\n  // const handleMouseEnter = (geoId, name) => {\n  //     const cur = allStates.find((s) => s.val === geoId);\n  //     const stateData = data.data.find((e) => e.code === cur.id)\n  //     setTooltipContent({\n  //         name: stateData.name,\n  //         provider_count: stateData.provider_brand_count,\n  //         total_provider_count: stateData.store_count,\n  //         provider_brands: stateData.provider_brands\n  //     });\n  //     ReactTooltip.rebuild();\n  // };\n  // const handleClick = (geoId) => {\n  //     const cur = allStates.find((s) => s.val === geoId);\n  //     setUSState(cur.id)\n  // }\n  // return (\n  //     <ComposableMap data-tip=\"\" projection=\"geoAlbersUsa\">\n  //         <Geographies geography={geoUrl}>\n  //             {({ geographies }) => (\n  //                 <>\n  //                     {geographies.map((geo) => {\n  //                         const centroid = geoCentroid(geo);\n  //                         const cur = allStates.find((s) => s.val === geo.id);\n  //                         const stateData = data?.data.find((e) => e.code === cur.id)\n  //                         console.log(stateData?.store_count)\n  //                         return (\n  //                             <>\n  //                                 <Geography\n  //                                     key={geo.rsmKey}\n  //                                     stroke=\"#FFF\"\n  //                                     geography={geo}\n  //                                     fill=\"#DDD\"\n  //                                     style={{\n  //                                         default: {\n  //                                             fill: colorScale(stateData?.store_count || 0),\n  //                                             outline: 'none',\n  //                                         },\n  //                                         hover: {\n  //                                             fill: \"#C53030\",\n  //                                             outline: 'none',\n  //                                         }\n  //                                     }}\n  //                                     onMouseEnter={() => handleMouseEnter(geo.id, geo.properties.name)}\n  //                                     onClick={() => handleClick(geo.id)}\n  //                                     onMouseLeave={() => setTooltipContent(null)}\n  //                                 />\n  //                                 <g key={geo.rsmKey + '-name'}>\n  //                                     {cur &&\n  //                                     centroid[0] > -160 &&\n  //                                     centroid[0] < -67 &&\n  //                                     (Object.keys(offsets).indexOf(cur.id) === -1 ? (\n  //                                         <Marker coordinates={centroid}>\n  //                                             <text\n  //                                                 textAnchor=\"left\"\n  //                                                 fill=\"#FFF\"\n  //                                             >\n  //                                                 {cur.id}\n  //                                             </text>\n  //                                         </Marker>\n  //                                     ) : (\n  //                                         <Annotation\n  //                                             subject={centroid}\n  //                                             dx={offsets[cur.id][0]}\n  //                                             dy={offsets[cur.id][1]}\n  //                                         >\n  //                                             <text x={4} fontSize={14}>\n  //                                                 {cur.id}\n  //                                             </text>\n  //                                         </Annotation>\n  //                                     ))}\n  //                                 </g>\n  //                             </>\n  //                         );\n  //                     })}\n  //                 </>\n  //             )}\n  //         </Geographies>\n  //     </ComposableMap>\n  // );\n};\n\n_c = MapChart;\nexport default _c2 = /*#__PURE__*/memo(MapChart);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MapChart\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/huixu/Desktop/Georgia Tech/vaccine-distribution-app/D3Visualization/src/components/MapChart.js"],"names":["useEffect","useState","memo","geoCentroid","scaleQuantize","ComposableMap","Geographies","Geography","Marker","Annotation","ReactTooltip","allStates","geoUrl","offsets","VT","NH","MA","RI","CT","NJ","DE","MD","DC","colorScale","domain","range","MapChart","props","console","log"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,IAA9B,QAA0C,OAA1C;AACA,SAASC,WAAT,QAA4B,QAA5B;AACA,SAASC,aAAT,QAA8B,UAA9B;AACA,SACIC,aADJ,EAEIC,WAFJ,EAGIC,SAHJ,EAIIC,MAJJ,EAKIC,UALJ,QAMO,mBANP;AAOA,OAAOC,YAAP,MAAyB,eAAzB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AAEA,MAAMC,MAAM,GAAG,yDAAf;AAEA,MAAMC,OAAO,GAAG;AACZC,EAAAA,EAAE,EAAE,CAAC,EAAD,EAAK,CAAC,CAAN,CADQ;AAEZC,EAAAA,EAAE,EAAE,CAAC,EAAD,EAAK,CAAL,CAFQ;AAGZC,EAAAA,EAAE,EAAE,CAAC,EAAD,EAAK,CAAC,CAAN,CAHQ;AAIZC,EAAAA,EAAE,EAAE,CAAC,EAAD,EAAK,CAAL,CAJQ;AAKZC,EAAAA,EAAE,EAAE,CAAC,EAAD,EAAK,EAAL,CALQ;AAMZC,EAAAA,EAAE,EAAE,CAAC,EAAD,EAAK,CAAL,CANQ;AAOZC,EAAAA,EAAE,EAAE,CAAC,EAAD,EAAK,CAAL,CAPQ;AAQZC,EAAAA,EAAE,EAAE,CAAC,EAAD,EAAK,EAAL,CARQ;AASZC,EAAAA,EAAE,EAAE,CAAC,EAAD,EAAK,EAAL;AATQ,CAAhB;AAYA,MAAMC,UAAU,GAAGnB,aAAa,GAC3BoB,MADc,CACP,CAAC,CAAD,EAAI,IAAJ,CADO,EAEdC,KAFc,CAER,CACH,SADG,EAEH,SAFG,EAGH,SAHG,EAIH,SAJG,EAKH,SALG,EAMH,SANG,EAOH,SAPG,EAQH,SARG,EASH,SATG,CAFQ,CAAnB;;AAcA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AACxBC,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAmBF,KAAnB,EADwB,CAMxB;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CA5FD;;KAAMD,Q;AA6FN,kCAAexB,IAAI,CAACwB,QAAD,CAAnB","sourcesContent":["import { useEffect, useState, memo } from 'react';\nimport { geoCentroid } from 'd3-geo';\nimport { scaleQuantize } from \"d3-scale\";\nimport {\n    ComposableMap,\n    Geographies,\n    Geography,\n    Marker,\n    Annotation,\n} from 'react-simple-maps';\nimport ReactTooltip from 'react-tooltip';\nimport allStates from '../data/allstates.json';\n\nconst geoUrl = 'https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json';\n\nconst offsets = {\n    VT: [50, -8],\n    NH: [34, 2],\n    MA: [30, -1],\n    RI: [28, 2],\n    CT: [35, 10],\n    NJ: [34, 1],\n    DE: [33, 0],\n    MD: [47, 10],\n    DC: [49, 21],\n};\n\nconst colorScale = scaleQuantize()\n    .domain([0, 1000])\n    .range([\n        \"#b0b8d0\",\n        \"#a79bd5\",\n        \"#9880d1\",\n        \"#8667c9\",\n        \"#7250bc\",\n        \"#5c3aac\",\n        \"#442599\",\n        \"#2a1285\",\n        \"#000070\"\n    ]);\n\nconst MapChart = (props) => {\n    console.log(\"----\",props)\n\n\n\n\n    // useEffect(() => {\n    //     ReactTooltip.rebuild();\n    // }, []);\n\n    // const handleMouseEnter = (geoId, name) => {\n    //     const cur = allStates.find((s) => s.val === geoId);\n    //     const stateData = data.data.find((e) => e.code === cur.id)\n    //     setTooltipContent({\n    //         name: stateData.name,\n    //         provider_count: stateData.provider_brand_count,\n    //         total_provider_count: stateData.store_count,\n    //         provider_brands: stateData.provider_brands\n    //     });\n    //     ReactTooltip.rebuild();\n    // };\n\n    // const handleClick = (geoId) => {\n    //     const cur = allStates.find((s) => s.val === geoId);\n    //     setUSState(cur.id)\n    // }\n\n    // return (\n    //     <ComposableMap data-tip=\"\" projection=\"geoAlbersUsa\">\n    //         <Geographies geography={geoUrl}>\n    //             {({ geographies }) => (\n    //                 <>\n    //                     {geographies.map((geo) => {\n                            \n    //                         const centroid = geoCentroid(geo);\n    //                         const cur = allStates.find((s) => s.val === geo.id);\n    //                         const stateData = data?.data.find((e) => e.code === cur.id)\n    //                         console.log(stateData?.store_count)\n    //                         return (\n    //                             <>\n    //                                 <Geography\n    //                                     key={geo.rsmKey}\n    //                                     stroke=\"#FFF\"\n    //                                     geography={geo}\n    //                                     fill=\"#DDD\"\n    //                                     style={{\n    //                                         default: {\n    //                                             fill: colorScale(stateData?.store_count || 0),\n    //                                             outline: 'none',\n    //                                         },\n    //                                         hover: {\n    //                                             fill: \"#C53030\",\n    //                                             outline: 'none',\n    //                                         }\n    //                                     }}\n    //                                     onMouseEnter={() => handleMouseEnter(geo.id, geo.properties.name)}\n    //                                     onClick={() => handleClick(geo.id)}\n    //                                     onMouseLeave={() => setTooltipContent(null)}\n    //                                 />\n    //                                 <g key={geo.rsmKey + '-name'}>\n    //                                     {cur &&\n    //                                     centroid[0] > -160 &&\n    //                                     centroid[0] < -67 &&\n    //                                     (Object.keys(offsets).indexOf(cur.id) === -1 ? (\n    //                                         <Marker coordinates={centroid}>\n    //                                             <text\n    //                                                 textAnchor=\"left\"\n    //                                                 fill=\"#FFF\"\n    //                                             >\n    //                                                 {cur.id}\n    //                                             </text>\n    //                                         </Marker>\n    //                                     ) : (\n    //                                         <Annotation\n    //                                             subject={centroid}\n    //                                             dx={offsets[cur.id][0]}\n    //                                             dy={offsets[cur.id][1]}\n    //                                         >\n    //                                             <text x={4} fontSize={14}>\n    //                                                 {cur.id}\n    //                                             </text>\n    //                                         </Annotation>\n    //                                     ))}\n    //                                 </g>\n    //                             </>\n    //                         );\n    //                     })}\n    //                 </>\n    //             )}\n    //         </Geographies>\n    //     </ComposableMap>\n    // );\n};\nexport default memo(MapChart);\n"]},"metadata":{},"sourceType":"module"}