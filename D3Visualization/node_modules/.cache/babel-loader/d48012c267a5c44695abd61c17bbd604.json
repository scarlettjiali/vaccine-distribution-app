{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { View, StyleSheet, Dimensions } from 'react-native';\nimport { NavigationHelpersContext, useTheme } from '@react-navigation/native';\nimport { ScreenContainer } from 'react-native-screens';\nimport SafeAreaProviderCompat, { initialSafeAreaInsets } from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport BottomTabBar, { getTabBarHeight } from './BottomTabBar';\nimport BottomTabBarHeightCallbackContext from '../utils/BottomTabBarHeightCallbackContext';\nimport BottomTabBarHeightContext from '../utils/BottomTabBarHeightContext';\n\nfunction SceneContent({\n  isFocused,\n  children,\n  style\n}) {\n  const {\n    colors\n  } = useTheme();\n  return /*#__PURE__*/React.createElement(View, {\n    accessibilityElementsHidden: !isFocused,\n    importantForAccessibility: isFocused ? 'auto' : 'no-hide-descendants',\n    style: [styles.content, {\n      backgroundColor: colors.background\n    }, style]\n  }, children);\n}\n\nexport default class BottomTabView extends React.Component {\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const focusedRouteKey = nextProps.state.routes[nextProps.state.index].key;\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(focusedRouteKey) ? prevState.loaded : [...prevState.loaded, focusedRouteKey]\n    };\n  }\n\n  constructor(_props) {\n    super(_props);\n\n    _defineProperty(this, \"renderTabBar\", () => {\n      const {\n        tabBar = props => /*#__PURE__*/React.createElement(BottomTabBar, props),\n        tabBarOptions,\n        state,\n        navigation,\n        descriptors\n      } = this.props;\n      return tabBar({ ...tabBarOptions,\n        state: state,\n        descriptors: descriptors,\n        navigation: navigation\n      });\n    });\n\n    _defineProperty(this, \"handleTabBarHeightChange\", height => {\n      this.setState(state => {\n        if (state.tabBarHeight !== height) {\n          return {\n            tabBarHeight: height\n          };\n        }\n\n        return null;\n      });\n    });\n\n    const {\n      state: _state,\n      tabBarOptions: _tabBarOptions\n    } = this.props;\n    const dimensions = Dimensions.get('window');\n    const tabBarHeight = getTabBarHeight({\n      state: _state,\n      dimensions,\n      layout: {\n        width: dimensions.width,\n        height: 0\n      },\n      insets: initialSafeAreaInsets,\n      adaptive: _tabBarOptions === null || _tabBarOptions === void 0 ? void 0 : _tabBarOptions.adaptive,\n      labelPosition: _tabBarOptions === null || _tabBarOptions === void 0 ? void 0 : _tabBarOptions.labelPosition,\n      tabStyle: _tabBarOptions === null || _tabBarOptions === void 0 ? void 0 : _tabBarOptions.tabStyle,\n      style: _tabBarOptions === null || _tabBarOptions === void 0 ? void 0 : _tabBarOptions.style\n    });\n    this.state = {\n      loaded: [_state.routes[_state.index].key],\n      tabBarHeight: tabBarHeight\n    };\n  }\n\n  render() {\n    const {\n      state,\n      descriptors,\n      navigation,\n      lazy,\n      detachInactiveScreens = true,\n      sceneContainerStyle\n    } = this.props;\n    const {\n      routes\n    } = state;\n    const {\n      loaded,\n      tabBarHeight\n    } = this.state;\n    return /*#__PURE__*/React.createElement(NavigationHelpersContext.Provider, {\n      value: navigation\n    }, /*#__PURE__*/React.createElement(SafeAreaProviderCompat, null, /*#__PURE__*/React.createElement(ScreenContainer // @ts-ignore\n    , {\n      enabled: detachInactiveScreens,\n      style: styles.container\n    }, routes.map((route, index) => {\n      const descriptor = descriptors[route.key];\n      const {\n        unmountOnBlur\n      } = descriptor.options;\n      const isFocused = state.index === index;\n\n      if (unmountOnBlur && !isFocused) {\n        return null;\n      }\n\n      if (lazy && !loaded.includes(route.key) && !isFocused) {\n        // Don't render a screen if we've never navigated to it\n        return null;\n      }\n\n      return /*#__PURE__*/React.createElement(ResourceSavingScene, {\n        key: route.key,\n        style: StyleSheet.absoluteFill,\n        isVisible: isFocused,\n        enabled: detachInactiveScreens\n      }, /*#__PURE__*/React.createElement(SceneContent, {\n        isFocused: isFocused,\n        style: sceneContainerStyle\n      }, /*#__PURE__*/React.createElement(BottomTabBarHeightContext.Provider, {\n        value: tabBarHeight\n      }, descriptor.render())));\n    })), /*#__PURE__*/React.createElement(BottomTabBarHeightCallbackContext.Provider, {\n      value: this.handleTabBarHeightChange\n    }, this.renderTabBar())));\n  }\n\n}\n\n_defineProperty(BottomTabView, \"defaultProps\", {\n  lazy: true\n});\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["BottomTabView.tsx"],"names":["style","colors","useTheme","isFocused","styles","backgroundColor","background","BottomTabView","React","lazy","focusedRouteKey","nextProps","loaded","prevState","constructor","state","tabBarOptions","dimensions","Dimensions","tabBarHeight","getTabBarHeight","layout","width","height","insets","adaptive","labelPosition","tabStyle","tabBar","props","descriptors","navigation","render","detachInactiveScreens","sceneContainerStyle","routes","container","descriptor","route","unmountOnBlur","StyleSheet","handleTabBarHeightChange","flex","overflow","content"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  Dimensions,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\n\nimport {\n  NavigationHelpersContext,\n  ParamListBase,\n  TabNavigationState,\n  useTheme,\n} from '@react-navigation/native';\nimport { ScreenContainer } from 'react-native-screens';\n\nimport SafeAreaProviderCompat, {\n  initialSafeAreaInsets,\n} from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport BottomTabBar, { getTabBarHeight } from './BottomTabBar';\nimport BottomTabBarHeightCallbackContext from '../utils/BottomTabBarHeightCallbackContext';\nimport BottomTabBarHeightContext from '../utils/BottomTabBarHeightContext';\nimport type {\n  BottomTabNavigationConfig,\n  BottomTabDescriptorMap,\n  BottomTabNavigationHelpers,\n  BottomTabBarProps,\n} from '../types';\n\ntype Props = BottomTabNavigationConfig & {\n  state: TabNavigationState<ParamListBase>;\n  navigation: BottomTabNavigationHelpers;\n  descriptors: BottomTabDescriptorMap;\n};\n\ntype State = {\n  loaded: string[];\n  tabBarHeight: number;\n};\n\nfunction SceneContent({\n  isFocused,\n  children,\n  style,\n}: {\n  isFocused: boolean;\n  children: React.ReactNode;\n  style?: StyleProp<ViewStyle>;\n}) {\n  const { colors } = useTheme();\n\n  return (\n    <View\n      accessibilityElementsHidden={!isFocused}\n      importantForAccessibility={isFocused ? 'auto' : 'no-hide-descendants'}\n      style={[styles.content, { backgroundColor: colors.background }, style]}\n    >\n      {children}\n    </View>\n  );\n}\n\nexport default class BottomTabView extends React.Component<Props, State> {\n  static defaultProps = {\n    lazy: true,\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    const focusedRouteKey = nextProps.state.routes[nextProps.state.index].key;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(focusedRouteKey)\n        ? prevState.loaded\n        : [...prevState.loaded, focusedRouteKey],\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    const { state, tabBarOptions } = this.props;\n\n    const dimensions = Dimensions.get('window');\n    const tabBarHeight = getTabBarHeight({\n      state,\n      dimensions,\n      layout: { width: dimensions.width, height: 0 },\n      insets: initialSafeAreaInsets,\n      adaptive: tabBarOptions?.adaptive,\n      labelPosition: tabBarOptions?.labelPosition,\n      tabStyle: tabBarOptions?.tabStyle,\n      style: tabBarOptions?.style,\n    });\n\n    this.state = {\n      loaded: [state.routes[state.index].key],\n      tabBarHeight: tabBarHeight,\n    };\n  }\n\n  private renderTabBar = () => {\n    const {\n      tabBar = (props: BottomTabBarProps) => <BottomTabBar {...props} />,\n      tabBarOptions,\n      state,\n      navigation,\n      descriptors,\n    } = this.props;\n    return tabBar({\n      ...tabBarOptions,\n      state: state,\n      descriptors: descriptors,\n      navigation: navigation,\n    });\n  };\n\n  private handleTabBarHeightChange = (height: number) => {\n    this.setState((state) => {\n      if (state.tabBarHeight !== height) {\n        return { tabBarHeight: height };\n      }\n\n      return null;\n    });\n  };\n\n  render() {\n    const {\n      state,\n      descriptors,\n      navigation,\n      lazy,\n      detachInactiveScreens = true,\n      sceneContainerStyle,\n    } = this.props;\n    const { routes } = state;\n    const { loaded, tabBarHeight } = this.state;\n\n    return (\n      <NavigationHelpersContext.Provider value={navigation}>\n        <SafeAreaProviderCompat>\n          <ScreenContainer\n            // @ts-ignore\n            enabled={detachInactiveScreens}\n            style={styles.container}\n          >\n            {routes.map((route, index) => {\n              const descriptor = descriptors[route.key];\n              const { unmountOnBlur } = descriptor.options;\n              const isFocused = state.index === index;\n\n              if (unmountOnBlur && !isFocused) {\n                return null;\n              }\n\n              if (lazy && !loaded.includes(route.key) && !isFocused) {\n                // Don't render a screen if we've never navigated to it\n                return null;\n              }\n\n              return (\n                <ResourceSavingScene\n                  key={route.key}\n                  style={StyleSheet.absoluteFill}\n                  isVisible={isFocused}\n                  enabled={detachInactiveScreens}\n                >\n                  <SceneContent\n                    isFocused={isFocused}\n                    style={sceneContainerStyle}\n                  >\n                    <BottomTabBarHeightContext.Provider value={tabBarHeight}>\n                      {descriptor.render()}\n                    </BottomTabBarHeightContext.Provider>\n                  </SceneContent>\n                </ResourceSavingScene>\n              );\n            })}\n          </ScreenContainer>\n          <BottomTabBarHeightCallbackContext.Provider\n            value={this.handleTabBarHeightChange}\n          >\n            {this.renderTabBar()}\n          </BottomTabBarHeightCallbackContext.Provider>\n        </SafeAreaProviderCompat>\n      </NavigationHelpersContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n  content: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}