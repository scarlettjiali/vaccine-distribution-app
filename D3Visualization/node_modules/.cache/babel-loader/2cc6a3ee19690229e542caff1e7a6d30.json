{"ast":null,"code":"import * as React from 'react';\nimport { SafeAreaProvider, SafeAreaConsumer, initialWindowSafeAreaInsets } from 'react-native-safe-area-context';\nimport { getStatusBarHeight, getBottomSpace } from 'react-native-iphone-x-helper'; // The provider component for safe area initializes asynchornously\n// Until the insets are available, there'll be blank screen\n// To avoid the blank screen, we specify some initial values\n\nexport const initialSafeAreaInsets = {\n  // Approximate values which are good enough for most cases\n  top: getStatusBarHeight(true),\n  bottom: getBottomSpace(),\n  right: 0,\n  left: 0,\n  // If we are on a newer version of the library, we can get the correct window insets\n  // The component might not be filling the window, but this is good enough for most cases\n  ...initialWindowSafeAreaInsets\n};\nexport default function SafeAreaProviderCompat({\n  children\n}) {\n  return /*#__PURE__*/React.createElement(SafeAreaConsumer, null, insets => {\n    if (insets) {\n      // If we already have insets, don't wrap the stack in another safe area provider\n      // This avoids an issue with updates at the cost of potentially incorrect values\n      // https://github.com/react-navigation/react-navigation/issues/174\n      return children;\n    }\n\n    return /*#__PURE__*/React.createElement(SafeAreaProvider, {\n      initialSafeAreaInsets: initialSafeAreaInsets\n    }, children);\n  });\n}","map":{"version":3,"sources":["SafeAreaProviderCompat.tsx"],"names":["initialSafeAreaInsets","top","getStatusBarHeight","bottom","getBottomSpace","right","left","initialWindowSafeAreaInsets","children","insets"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,gBAAA,EAAA,gBAAA,EAAA,2BAAA,QAAA,gCAAA;AAKA,SAAA,kBAAA,EAAA,cAAA,QAAA,8BAAA,C,CAKA;AACA;AACA;;AACA,OAAO,MAAMA,qBAAqB,GAAG;AACnC;AACAC,EAAAA,GAAG,EAAEC,kBAAkB,CAFY,IAEZ,CAFY;AAGnCC,EAAAA,MAAM,EAAEC,cAH2B,EAAA;AAInCC,EAAAA,KAAK,EAJ8B,CAAA;AAKnCC,EAAAA,IAAI,EAL+B,CAAA;AAMnC;AACA;AACA,KAAGC;AARgC,CAA9B;AAeP,eAAe,SAAA,sBAAA,CAAgC;AAAEC,EAAAA;AAAF,CAAhC,EAAqD;AAClE,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA,IAAA,EACIC,MAAD,IAAY;AACX,QAAA,MAAA,EAAY;AACV;AACA;AACA;AACA,aAAA,QAAA;AACD;;AAED,WAAA,aACE,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA;AAAkB,MAAA,qBAAqB,EAAET;AAAzC,KAAA,EADF,QACE,CADF;AAVN,GACE,CADF;AAkBD","sourcesContent":["import * as React from 'react';\nimport {\n  SafeAreaProvider,\n  SafeAreaConsumer,\n  initialWindowSafeAreaInsets,\n} from 'react-native-safe-area-context';\nimport {\n  getStatusBarHeight,\n  getBottomSpace,\n} from 'react-native-iphone-x-helper';\n\n// The provider component for safe area initializes asynchornously\n// Until the insets are available, there'll be blank screen\n// To avoid the blank screen, we specify some initial values\nexport const initialSafeAreaInsets = {\n  // Approximate values which are good enough for most cases\n  top: getStatusBarHeight(true),\n  bottom: getBottomSpace(),\n  right: 0,\n  left: 0,\n  // If we are on a newer version of the library, we can get the correct window insets\n  // The component might not be filling the window, but this is good enough for most cases\n  ...initialWindowSafeAreaInsets,\n};\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport default function SafeAreaProviderCompat({ children }: Props) {\n  return (\n    <SafeAreaConsumer>\n      {(insets) => {\n        if (insets) {\n          // If we already have insets, don't wrap the stack in another safe area provider\n          // This avoids an issue with updates at the cost of potentially incorrect values\n          // https://github.com/react-navigation/react-navigation/issues/174\n          return children;\n        }\n\n        return (\n          <SafeAreaProvider initialSafeAreaInsets={initialSafeAreaInsets}>\n            {children}\n          </SafeAreaProvider>\n        );\n      }}\n    </SafeAreaConsumer>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}