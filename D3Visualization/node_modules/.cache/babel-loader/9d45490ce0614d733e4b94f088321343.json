{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/huixu/Desktop/Georgia Tech/vaccine-distribution-app/D3Visualization/src/components/MapChart.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, memo } from 'react';\nimport { geoCentroid } from 'd3-geo';\nimport { scaleQuantize } from \"d3-scale\";\nimport { ComposableMap, Geographies, Geography, Marker, Annotation } from 'react-simple-maps';\nimport ReactTooltip from 'react-tooltip';\nimport allStates from '../data/allstates.json';\nvar states = [['Alabama', 'AL'], ['Alaska', 'AK'], ['American Samoa', 'AS'], ['Arizona', 'AZ'], ['Arkansas', 'AR'], ['Armed Forces Americas', 'AA'], ['Armed Forces Europe', 'AE'], ['Armed Forces Pacific', 'AP'], ['California', 'CA'], ['Colorado', 'CO'], ['Connecticut', 'CT'], ['Delaware', 'DE'], ['District Of Columbia', 'DC'], ['Florida', 'FL'], ['Georgia', 'GA'], ['Guam', 'GU'], ['Hawaii', 'HI'], ['Idaho', 'ID'], ['Illinois', 'IL'], ['Indiana', 'IN'], ['Iowa', 'IA'], ['Kansas', 'KS'], ['Kentucky', 'KY'], ['Louisiana', 'LA'], ['Maine', 'ME'], ['Marshall Islands', 'MH'], ['Maryland', 'MD'], ['Massachusetts', 'MA'], ['Michigan', 'MI'], ['Minnesota', 'MN'], ['Mississippi', 'MS'], ['Missouri', 'MO'], ['Montana', 'MT'], ['Nebraska', 'NE'], ['Nevada', 'NV'], ['New Hampshire', 'NH'], ['New Jersey', 'NJ'], ['New Mexico', 'NM'], ['New York', 'NY'], ['North Carolina', 'NC'], ['North Dakota', 'ND'], ['Northern Mariana Islands', 'NP'], ['Ohio', 'OH'], ['Oklahoma', 'OK'], ['Oregon', 'OR'], ['Pennsylvania', 'PA'], ['Puerto Rico', 'PR'], ['Rhode Island', 'RI'], ['South Carolina', 'SC'], ['South Dakota', 'SD'], ['Tennessee', 'TN'], ['Texas', 'TX'], ['US Virgin Islands', 'VI'], ['Utah', 'UT'], ['Vermont', 'VT'], ['Virginia', 'VA'], ['Washington', 'WA'], ['West Virginia', 'WV'], ['Wisconsin', 'WI'], ['Wyoming', 'WY']];\nconst geoUrl = 'https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json';\nconst offsets = {\n  VT: [50, -8],\n  NH: [34, 2],\n  MA: [30, -1],\n  RI: [28, 2],\n  CT: [35, 10],\n  NJ: [34, 1],\n  DE: [33, 0],\n  MD: [47, 10],\n  DC: [49, 21]\n};\nconst colorScale = scaleQuantize().domain([0, 1000]).range([\"#b0b8d0\", \"#a79bd5\", \"#9880d1\", \"#8667c9\", \"#7250bc\", \"#5c3aac\", \"#442599\", \"#2a1285\", \"#000070\"]);\n\nconst MapChart = props => {\n  _s();\n\n  console.log(\"----\", props.case); // const [state, setUSState] = useState(null);\n  // useEffect(() => {\n  //     fetch(`https://www.vaccinespotter.org/api/v0/states/${state}.json`)\n  //         .then(response => response.json())\n  //         .then(data => setVender({data}));\n  // }, [state]);\n\n  useEffect(() => {\n    ReactTooltip.rebuild();\n  }, []);\n\n  const handleMouseEnter = (geoId, name) => {\n    const cur = allStates.find(s => s.val === geoId);\n    let stateData;\n\n    if (props.case === \"appointment\") {\n      stateData = props.data.data.find(e => e.code === cur.id);\n      props.setTooltipContent({\n        name: stateData.name,\n        provider_count: stateData.provider_brand_count,\n        total_provider_count: stateData.store_count,\n        provider_brands: stateData.provider_brands\n      });\n    } else if (props.case === \"case\") {\n      var _props$data;\n\n      stateData = (_props$data = props.data) === null || _props$data === void 0 ? void 0 : _props$data.data.find(e => e.state === cur.id);\n      const name = stateData.state;\n      const cur = allStates.find(s => s.val === geoId);\n      console.log();\n      props.setTooltipContent({\n        name: name,\n        cases: stateData.actuals.cases,\n        deaths: stateData.actuals.deaths,\n        newCases: stateData.actuals.newCases,\n        newDeaths: stateData.actuals.newDeaths,\n        riskLevels: stateData.riskLevels.overall\n      });\n    } else {\n      var _props$data2;\n\n      stateData = (_props$data2 = props.data) === null || _props$data2 === void 0 ? void 0 : _props$data2.data.find(e => e.state === cur.id);\n      props.setTooltipContent({\n        name: stateData.name,\n        cases: stateData.actuals.cases,\n        deaths: stateData.actuals.deaths,\n        newCases: stateData.actuals.newCases,\n        newDeaths: stateData.actuals.newDeaths,\n        riskLevels: stateData.riskLevels.overall\n      });\n    } // // const stateData = props.data.data.find((e) => e.code === cur.id)\n    // // if(props.case===\"appointment\"){\n    // //     const cur = allStates.find((s) => s.val === geoId);\n    // //     const stateData = props.data.data.find((e) => e.code === cur.id)\n    // //     props.setTooltipContent({\n    // //     name: stateData.name,\n    // //     provider_count: stateData.provider_brand_count,\n    // //     total_provider_count: stateData.store_count,\n    // //     provider_brands: stateData.provider_brands\n    // // });\n    // // }\n    // props.setTooltipContent({\n    //     name: stateData.name,\n    //     provider_count: stateData.provider_brand_count,\n    //     total_provider_count: stateData.store_count,\n    //     provider_brands: stateData.provider_brands\n    // });\n\n\n    ReactTooltip.rebuild();\n  };\n\n  const handleClick = geoId => {\n    const cur = allStates.find(s => s.val === geoId);\n    props.setUSState(cur.id);\n  }; // const arr1=[]\n  // if(props.data!= null){\n  //     // console.log(props.data)\n  //     props.data.data.forEach(element => console.log(element));\n  // }\n  // const max_key = Math.max(...arr1)\n  // // console.log(\"max0--\",props.data)\n\n\n  return /*#__PURE__*/_jsxDEV(ComposableMap, {\n    \"data-tip\": \"\",\n    projection: \"geoAlbersUsa\",\n    children: /*#__PURE__*/_jsxDEV(Geographies, {\n      geography: geoUrl,\n      children: ({\n        geographies\n      }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: geographies.map(geo => {\n          const centroid = geoCentroid(geo);\n          let mapData;\n          let stateData;\n          const cur = allStates.find(s => s.val === geo.id);\n          let scale;\n\n          if (props.case === \"appointment\") {\n            var _props$data3;\n\n            const stateData = (_props$data3 = props.data) === null || _props$data3 === void 0 ? void 0 : _props$data3.data.find(e => e.code === cur.id);\n            mapData = stateData === null || stateData === void 0 ? void 0 : stateData.store_count;\n\n            if (props.data != null) {\n              scale = Math.max.apply(Math, props.data.data.map(function (o) {\n                return o.store_count;\n              }));\n            }\n\n            mapData = (stateData === null || stateData === void 0 ? void 0 : stateData.store_count) / scale * 1000;\n          } else if (props.case === \"case\") {\n            var _props$data4;\n\n            const stateData = (_props$data4 = props.data) === null || _props$data4 === void 0 ? void 0 : _props$data4.data.find(e => e.state === cur.id);\n            mapData = stateData === null || stateData === void 0 ? void 0 : stateData.actuals.cases;\n\n            if (props.data != null) {\n              scale = Math.max.apply(Math, props.data.data.map(function (o) {\n                return o.actuals.cases;\n              }));\n            }\n\n            mapData = (stateData === null || stateData === void 0 ? void 0 : stateData.actuals.cases) / scale * 1000;\n          } else {\n            var _props$data5;\n\n            const stateData = (_props$data5 = props.data) === null || _props$data5 === void 0 ? void 0 : _props$data5.data.find(e => e.state === cur.id);\n            mapData = stateData === null || stateData === void 0 ? void 0 : stateData.actuals.cases;\n\n            if (props.data != null) {\n              scale = Math.max.apply(Math, props.data.data.map(function (o) {\n                return o.actuals.cases;\n              }));\n            }\n\n            mapData = (stateData === null || stateData === void 0 ? void 0 : stateData.actuals.cases) / scale * 1000;\n          }\n\n          console.log(scale);\n          return /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Geography, {\n              stroke: \"#FFF\",\n              geography: geo,\n              fill: \"#DDD\",\n              style: {\n                default: {\n                  fill: colorScale(mapData || 0),\n                  outline: 'none'\n                },\n                hover: {\n                  fill: \"#C53030\",\n                  outline: 'none'\n                }\n              },\n              onMouseEnter: () => handleMouseEnter(geo.id, geo.properties.name),\n              onClick: () => handleClick(geo.id),\n              onMouseLeave: () => props.setTooltipContent(null)\n            }, geo.rsmKey, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n              children: cur && centroid[0] > -160 && centroid[0] < -67 && (Object.keys(offsets).indexOf(cur.id) === -1 ? /*#__PURE__*/_jsxDEV(Marker, {\n                coordinates: centroid,\n                children: /*#__PURE__*/_jsxDEV(\"text\", {\n                  textAnchor: \"left\",\n                  fill: \"#FFF\",\n                  children: cur.id\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 259,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 45\n              }, this) : /*#__PURE__*/_jsxDEV(Annotation, {\n                subject: centroid,\n                dx: offsets[cur.id][0],\n                dy: offsets[cur.id][1],\n                children: /*#__PURE__*/_jsxDEV(\"text\", {\n                  x: 4,\n                  fontSize: 14,\n                  children: cur.id\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 272,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 45\n              }, this))\n            }, geo.rsmKey + '-name', false, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true);\n        })\n      }, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MapChart, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = MapChart;\nexport default _c2 = /*#__PURE__*/memo(MapChart);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MapChart\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/huixu/Desktop/Georgia Tech/vaccine-distribution-app/D3Visualization/src/components/MapChart.js"],"names":["useEffect","useState","memo","geoCentroid","scaleQuantize","ComposableMap","Geographies","Geography","Marker","Annotation","ReactTooltip","allStates","states","geoUrl","offsets","VT","NH","MA","RI","CT","NJ","DE","MD","DC","colorScale","domain","range","MapChart","props","console","log","case","rebuild","handleMouseEnter","geoId","name","cur","find","s","val","stateData","data","e","code","id","setTooltipContent","provider_count","provider_brand_count","total_provider_count","store_count","provider_brands","state","cases","actuals","deaths","newCases","newDeaths","riskLevels","overall","handleClick","setUSState","geographies","map","geo","centroid","mapData","scale","Math","max","apply","o","default","fill","outline","hover","properties","rsmKey","Object","keys","indexOf"],"mappings":"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","sourcesContent":["import { useEffect, useState, memo } from 'react';\nimport { geoCentroid } from 'd3-geo';\nimport { scaleQuantize } from \"d3-scale\";\nimport {\n    ComposableMap,\n    Geographies,\n    Geography,\n    Marker,\n    Annotation,\n} from 'react-simple-maps';\nimport ReactTooltip from 'react-tooltip';\nimport allStates from '../data/allstates.json';\nvar states = [\n    ['Alabama', 'AL'],\n    ['Alaska', 'AK'],\n    ['American Samoa', 'AS'],\n    ['Arizona', 'AZ'],\n    ['Arkansas', 'AR'],\n    ['Armed Forces Americas', 'AA'],\n    ['Armed Forces Europe', 'AE'],\n    ['Armed Forces Pacific', 'AP'],\n    ['California', 'CA'],\n    ['Colorado', 'CO'],\n    ['Connecticut', 'CT'],\n    ['Delaware', 'DE'],\n    ['District Of Columbia', 'DC'],\n    ['Florida', 'FL'],\n    ['Georgia', 'GA'],\n    ['Guam', 'GU'],\n    ['Hawaii', 'HI'],\n    ['Idaho', 'ID'],\n    ['Illinois', 'IL'],\n    ['Indiana', 'IN'],\n    ['Iowa', 'IA'],\n    ['Kansas', 'KS'],\n    ['Kentucky', 'KY'],\n    ['Louisiana', 'LA'],\n    ['Maine', 'ME'],\n    ['Marshall Islands', 'MH'],\n    ['Maryland', 'MD'],\n    ['Massachusetts', 'MA'],\n    ['Michigan', 'MI'],\n    ['Minnesota', 'MN'],\n    ['Mississippi', 'MS'],\n    ['Missouri', 'MO'],\n    ['Montana', 'MT'],\n    ['Nebraska', 'NE'],\n    ['Nevada', 'NV'],\n    ['New Hampshire', 'NH'],\n    ['New Jersey', 'NJ'],\n    ['New Mexico', 'NM'],\n    ['New York', 'NY'],\n    ['North Carolina', 'NC'],\n    ['North Dakota', 'ND'],\n    ['Northern Mariana Islands', 'NP'],\n    ['Ohio', 'OH'],\n    ['Oklahoma', 'OK'],\n    ['Oregon', 'OR'],\n    ['Pennsylvania', 'PA'],\n    ['Puerto Rico', 'PR'],\n    ['Rhode Island', 'RI'],\n    ['South Carolina', 'SC'],\n    ['South Dakota', 'SD'],\n    ['Tennessee', 'TN'],\n    ['Texas', 'TX'],\n    ['US Virgin Islands', 'VI'],\n    ['Utah', 'UT'],\n    ['Vermont', 'VT'],\n    ['Virginia', 'VA'],\n    ['Washington', 'WA'],\n    ['West Virginia', 'WV'],\n    ['Wisconsin', 'WI'],\n    ['Wyoming', 'WY'],];\nconst geoUrl = 'https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json';\n\nconst offsets = {\n    VT: [50, -8],\n    NH: [34, 2],\n    MA: [30, -1],\n    RI: [28, 2],\n    CT: [35, 10],\n    NJ: [34, 1],\n    DE: [33, 0],\n    MD: [47, 10],\n    DC: [49, 21],\n};\n\nconst colorScale = scaleQuantize()\n    .domain([0, 1000])\n    .range([\n        \"#b0b8d0\",\n        \"#a79bd5\",\n        \"#9880d1\",\n        \"#8667c9\",\n        \"#7250bc\",\n        \"#5c3aac\",\n        \"#442599\",\n        \"#2a1285\",\n        \"#000070\"\n    ]);\n\nconst MapChart = (props) => {\n    console.log(\"----\",props.case)\n\n    // const [state, setUSState] = useState(null);\n\n    // useEffect(() => {\n    //     fetch(`https://www.vaccinespotter.org/api/v0/states/${state}.json`)\n    //         .then(response => response.json())\n    //         .then(data => setVender({data}));\n    // }, [state]);\n\n    useEffect(() => {\n        ReactTooltip.rebuild();\n    }, []);\n\n    const handleMouseEnter = (geoId, name) => {\n        const cur = allStates.find((s) => s.val === geoId);\n        let stateData;\n        if(props.case===\"appointment\"){\n            stateData = props.data.data.find((e) => e.code === cur.id)\n            props.setTooltipContent({\n                name: stateData.name,\n                provider_count: stateData.provider_brand_count,\n                total_provider_count: stateData.store_count,\n                provider_brands: stateData.provider_brands\n            });\n           \n          \n            \n        }else if (props.case===\"case\"){   \n            stateData = props.data?.data.find((e) => e.state === cur.id)\n            const name = stateData.state;\n            const cur = allStates.find((s) => s.val === geoId);\n            console.log()\n            props.setTooltipContent({\n               name: name,\n               cases:stateData.actuals.cases,\n               deaths:stateData.actuals.deaths,\n               newCases:stateData.actuals.newCases,\n               newDeaths:stateData.actuals.newDeaths,\n               riskLevels:stateData.riskLevels.overall\n            });\n           \n        }else{\n            stateData = props.data?.data.find((e) => e.state === cur.id)\n            props.setTooltipContent({\n                name: stateData.name,\n               cases:stateData.actuals.cases,\n               deaths:stateData.actuals.deaths,\n               newCases:stateData.actuals.newCases,\n               newDeaths:stateData.actuals.newDeaths,\n               riskLevels:stateData.riskLevels.overall\n            });\n           \n           \n\n        }\n        \n        // // const stateData = props.data.data.find((e) => e.code === cur.id)\n        // // if(props.case===\"appointment\"){\n        // //     const cur = allStates.find((s) => s.val === geoId);\n        // //     const stateData = props.data.data.find((e) => e.code === cur.id)\n        // //     props.setTooltipContent({\n        // //     name: stateData.name,\n        // //     provider_count: stateData.provider_brand_count,\n        // //     total_provider_count: stateData.store_count,\n        // //     provider_brands: stateData.provider_brands\n        // // });\n        // // }\n        // props.setTooltipContent({\n        //     name: stateData.name,\n        //     provider_count: stateData.provider_brand_count,\n        //     total_provider_count: stateData.store_count,\n        //     provider_brands: stateData.provider_brands\n        // });\n        ReactTooltip.rebuild();\n    };\n\n    const handleClick = (geoId) => {\n        const cur = allStates.find((s) => s.val === geoId);\n        props.setUSState(cur.id)\n    }\n   \n    // const arr1=[]\n    // if(props.data!= null){\n    //     // console.log(props.data)\n    //     props.data.data.forEach(element => console.log(element));\n\n    // }\n    \n    // const max_key = Math.max(...arr1)\n    // // console.log(\"max0--\",props.data)\n\n    return (\n        <ComposableMap data-tip=\"\" projection=\"geoAlbersUsa\">\n            <Geographies geography={geoUrl}>\n                {({ geographies }) => (\n                    <>\n                        {geographies.map((geo) => {\n                            \n                            const centroid = geoCentroid(geo);\n                            let mapData;\n                            let stateData\n                            const cur = allStates.find((s) => s.val === geo.id);\n                            let scale;\n                            if(props.case===\"appointment\"){\n                                const stateData = props.data?.data.find((e) => e.code === cur.id)\n                                mapData=stateData?.store_count\n                                if(props.data!= null){\n                                    scale=Math.max.apply(Math, props.data.data.map(function(o) { return o.store_count; }))\n                                }\n                                mapData=stateData?.store_count/scale*1000\n                                \n                            }else if (props.case===\"case\"){   \n                                const stateData = props.data?.data.find((e) => e.state === cur.id)\n                                mapData=stateData?.actuals.cases\n                                if(props.data!= null){\n                                    scale=Math.max.apply(Math, props.data.data.map(function(o) { return o.actuals.cases; }))                            \n                                }\n                                mapData=stateData?.actuals.cases/scale*1000\n                            }else{\n                                const stateData = props.data?.data.find((e) => e.state === cur.id)\n                                mapData=stateData?.actuals.cases\n                                if(props.data!= null){\n                                    scale=Math.max.apply(Math, props.data.data.map(function(o) { return o.actuals.cases; }))                          \n                                }\n                                mapData=stateData?.actuals.cases/scale*1000\n\n                            }\n                            console.log(scale)\n                            return (\n                                <>\n                                    <Geography\n                                        key={geo.rsmKey}\n                                        stroke=\"#FFF\"\n                                        geography={geo}\n                                        fill=\"#DDD\"\n                                        style={{\n                                            default: {\n                                                fill: colorScale(mapData|| 0),\n                                                outline: 'none',\n                                            },\n                                            hover: {\n                                                fill: \"#C53030\",\n                                                outline: 'none',\n                                            }\n                                        }}\n                                        onMouseEnter={() => handleMouseEnter(geo.id, geo.properties.name)}\n                                        onClick={() => handleClick(geo.id)}\n                                        onMouseLeave={() => props.setTooltipContent(null)}\n                                    />\n                                    <g key={geo.rsmKey + '-name'}>\n                                        {cur &&\n                                        centroid[0] > -160 &&\n                                        centroid[0] < -67 &&\n                                        (Object.keys(offsets).indexOf(cur.id) === -1 ? (\n                                            <Marker coordinates={centroid}>\n                                                <text\n                                                    textAnchor=\"left\"\n                                                    fill=\"#FFF\"\n                                                >\n                                                    {cur.id}\n                                                </text>\n                                            </Marker>\n                                        ) : (\n                                            <Annotation\n                                                subject={centroid}\n                                                dx={offsets[cur.id][0]}\n                                                dy={offsets[cur.id][1]}\n                                            >\n                                                <text x={4} fontSize={14}>\n                                                    {cur.id}\n                                                </text>\n                                            </Annotation>\n                                        ))}\n                                    </g>\n                                </>\n                            );\n                        })}\n                    </>\n                )}\n            </Geographies>\n        </ComposableMap>\n    );\n};\nexport default memo(MapChart);\n"]},"metadata":{},"sourceType":"module"}