{"ast":null,"code":"import React from 'react';\nimport { View, Animated, StyleSheet, Platform } from 'react-native';\nimport { NavigationContext, NavigationRouteContext, CommonActions, useTheme, useLinkBuilder } from '@react-navigation/native';\nimport { useSafeArea } from 'react-native-safe-area-context';\nimport BottomTabItem from './BottomTabItem';\nimport BottomTabBarHeightCallbackContext from '../utils/BottomTabBarHeightCallbackContext';\nimport useWindowDimensions from '../utils/useWindowDimensions';\nimport useIsKeyboardShown from '../utils/useIsKeyboardShown';\nconst DEFAULT_TABBAR_HEIGHT = 49;\nconst COMPACT_TABBAR_HEIGHT = 32;\nconst DEFAULT_MAX_TAB_ITEM_WIDTH = 125;\nconst useNativeDriver = Platform.OS !== 'web';\n\nconst shouldUseHorizontalLabels = ({\n  state,\n  layout,\n  dimensions,\n  adaptive = true,\n  labelPosition,\n  tabStyle\n}) => {\n  if (labelPosition) {\n    return labelPosition === 'beside-icon';\n  }\n\n  if (!adaptive) {\n    return false;\n  }\n\n  if (layout.width >= 768) {\n    // Screen size matches a tablet\n    let maxTabItemWidth = DEFAULT_MAX_TAB_ITEM_WIDTH;\n    const flattenedStyle = StyleSheet.flatten(tabStyle);\n\n    if (flattenedStyle) {\n      if (typeof flattenedStyle.width === 'number') {\n        maxTabItemWidth = flattenedStyle.width;\n      } else if (typeof flattenedStyle.maxWidth === 'number') {\n        maxTabItemWidth = flattenedStyle.maxWidth;\n      }\n    }\n\n    return state.routes.length * maxTabItemWidth <= layout.width;\n  } else {\n    return dimensions.width > dimensions.height;\n  }\n};\n\nconst getPaddingBottom = insets => Math.max(insets.bottom - Platform.select({\n  ios: 4,\n  default: 0\n}), 0);\n\nexport const getTabBarHeight = ({\n  dimensions,\n  insets,\n  style,\n  ...rest\n}) => {\n  var _StyleSheet$flatten; // @ts-ignore\n\n\n  const customHeight = (_StyleSheet$flatten = StyleSheet.flatten(style)) === null || _StyleSheet$flatten === void 0 ? void 0 : _StyleSheet$flatten.height;\n\n  if (typeof customHeight === 'number') {\n    return customHeight;\n  }\n\n  const isLandscape = dimensions.width > dimensions.height;\n  const horizontalLabels = shouldUseHorizontalLabels({\n    dimensions,\n    ...rest\n  });\n  const paddingBottom = getPaddingBottom(insets);\n\n  if (Platform.OS === 'ios' && !Platform.isPad && isLandscape && horizontalLabels) {\n    return COMPACT_TABBAR_HEIGHT + paddingBottom;\n  }\n\n  return DEFAULT_TABBAR_HEIGHT + paddingBottom;\n};\nexport default function BottomTabBar({\n  state,\n  navigation,\n  descriptors,\n  activeBackgroundColor,\n  activeTintColor,\n  adaptive,\n  allowFontScaling,\n  inactiveBackgroundColor,\n  inactiveTintColor,\n  keyboardHidesTabBar = false,\n  labelPosition,\n  labelStyle,\n  iconStyle,\n  safeAreaInsets,\n  showLabel,\n  style,\n  tabStyle\n}) {\n  var _safeAreaInsets$top, _safeAreaInsets$right, _safeAreaInsets$botto, _safeAreaInsets$left;\n\n  const {\n    colors\n  } = useTheme();\n  const buildLink = useLinkBuilder();\n  const focusedRoute = state.routes[state.index];\n  const focusedDescriptor = descriptors[focusedRoute.key];\n  const focusedOptions = focusedDescriptor.options;\n  const dimensions = useWindowDimensions();\n  const isKeyboardShown = useIsKeyboardShown();\n  const onHeightChange = React.useContext(BottomTabBarHeightCallbackContext);\n  const shouldShowTabBar = focusedOptions.tabBarVisible !== false && !(keyboardHidesTabBar && isKeyboardShown);\n  const visibilityAnimationConfigRef = React.useRef(focusedOptions.tabBarVisibilityAnimationConfig);\n  React.useEffect(() => {\n    visibilityAnimationConfigRef.current = focusedOptions.tabBarVisibilityAnimationConfig;\n  });\n  const [isTabBarHidden, setIsTabBarHidden] = React.useState(!shouldShowTabBar);\n  const [visible] = React.useState(() => new Animated.Value(shouldShowTabBar ? 1 : 0));\n  React.useEffect(() => {\n    const visibilityAnimationConfig = visibilityAnimationConfigRef.current;\n\n    if (shouldShowTabBar) {\n      var _visibilityAnimationC, _visibilityAnimationC2;\n\n      const animation = (visibilityAnimationConfig === null || visibilityAnimationConfig === void 0 ? void 0 : (_visibilityAnimationC = visibilityAnimationConfig.show) === null || _visibilityAnimationC === void 0 ? void 0 : _visibilityAnimationC.animation) === 'spring' ? Animated.spring : Animated.timing;\n      animation(visible, {\n        toValue: 1,\n        useNativeDriver,\n        duration: 250,\n        ...(visibilityAnimationConfig === null || visibilityAnimationConfig === void 0 ? void 0 : (_visibilityAnimationC2 = visibilityAnimationConfig.show) === null || _visibilityAnimationC2 === void 0 ? void 0 : _visibilityAnimationC2.config)\n      }).start(({\n        finished\n      }) => {\n        if (finished) {\n          setIsTabBarHidden(false);\n        }\n      });\n    } else {\n      var _visibilityAnimationC3, _visibilityAnimationC4;\n\n      setIsTabBarHidden(true);\n      const animation = (visibilityAnimationConfig === null || visibilityAnimationConfig === void 0 ? void 0 : (_visibilityAnimationC3 = visibilityAnimationConfig.hide) === null || _visibilityAnimationC3 === void 0 ? void 0 : _visibilityAnimationC3.animation) === 'spring' ? Animated.spring : Animated.timing;\n      animation(visible, {\n        toValue: 0,\n        useNativeDriver,\n        duration: 200,\n        ...(visibilityAnimationConfig === null || visibilityAnimationConfig === void 0 ? void 0 : (_visibilityAnimationC4 = visibilityAnimationConfig.hide) === null || _visibilityAnimationC4 === void 0 ? void 0 : _visibilityAnimationC4.config)\n      }).start();\n    }\n  }, [visible, shouldShowTabBar]);\n  const [layout, setLayout] = React.useState({\n    height: 0,\n    width: dimensions.width\n  });\n\n  const handleLayout = e => {\n    var _StyleSheet$flatten2;\n\n    const {\n      height,\n      width\n    } = e.nativeEvent.layout;\n    const topBorderWidth = // @ts-ignore\n    (_StyleSheet$flatten2 = StyleSheet.flatten([styles.tabBar, style])) === null || _StyleSheet$flatten2 === void 0 ? void 0 : _StyleSheet$flatten2.borderTopWidth;\n    onHeightChange === null || onHeightChange === void 0 ? void 0 : onHeightChange(height + paddingBottom + (typeof topBorderWidth === 'number' ? topBorderWidth : 0));\n    setLayout(layout => {\n      if (height === layout.height && width === layout.width) {\n        return layout;\n      } else {\n        return {\n          height,\n          width\n        };\n      }\n    });\n  };\n\n  const {\n    routes\n  } = state;\n  const defaultInsets = useSafeArea();\n  const insets = {\n    top: (_safeAreaInsets$top = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.top) !== null && _safeAreaInsets$top !== void 0 ? _safeAreaInsets$top : defaultInsets.top,\n    right: (_safeAreaInsets$right = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.right) !== null && _safeAreaInsets$right !== void 0 ? _safeAreaInsets$right : defaultInsets.right,\n    bottom: (_safeAreaInsets$botto = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.bottom) !== null && _safeAreaInsets$botto !== void 0 ? _safeAreaInsets$botto : defaultInsets.bottom,\n    left: (_safeAreaInsets$left = safeAreaInsets === null || safeAreaInsets === void 0 ? void 0 : safeAreaInsets.left) !== null && _safeAreaInsets$left !== void 0 ? _safeAreaInsets$left : defaultInsets.left\n  };\n  const paddingBottom = getPaddingBottom(insets);\n  const tabBarHeight = getTabBarHeight({\n    state,\n    insets,\n    dimensions,\n    layout,\n    adaptive,\n    labelPosition,\n    tabStyle,\n    style\n  });\n  const hasHorizontalLabels = shouldUseHorizontalLabels({\n    state,\n    dimensions,\n    layout,\n    adaptive,\n    labelPosition,\n    tabStyle\n  });\n  return /*#__PURE__*/React.createElement(Animated.View, {\n    style: [styles.tabBar, {\n      backgroundColor: colors.card,\n      borderTopColor: colors.border\n    }, {\n      transform: [{\n        translateY: visible.interpolate({\n          inputRange: [0, 1],\n          outputRange: [layout.height + paddingBottom + StyleSheet.hairlineWidth, 0]\n        })\n      }],\n      // Absolutely position the tab bar so that the content is below it\n      // This is needed to avoid gap at bottom when the tab bar is hidden\n      position: isTabBarHidden ? 'absolute' : null\n    }, {\n      height: tabBarHeight,\n      paddingBottom,\n      paddingHorizontal: Math.max(insets.left, insets.right)\n    }, style],\n    pointerEvents: isTabBarHidden ? 'none' : 'auto'\n  }, /*#__PURE__*/React.createElement(View, {\n    style: styles.content,\n    onLayout: handleLayout\n  }, routes.map((route, index) => {\n    const focused = index === state.index;\n    const {\n      options\n    } = descriptors[route.key];\n\n    const onPress = () => {\n      const event = navigation.emit({\n        type: 'tabPress',\n        target: route.key,\n        canPreventDefault: true\n      });\n\n      if (!focused && !event.defaultPrevented) {\n        navigation.dispatch({ ...CommonActions.navigate(route.name),\n          target: state.key\n        });\n      }\n    };\n\n    const onLongPress = () => {\n      navigation.emit({\n        type: 'tabLongPress',\n        target: route.key\n      });\n    };\n\n    const label = options.tabBarLabel !== undefined ? options.tabBarLabel : options.title !== undefined ? options.title : route.name;\n    const accessibilityLabel = options.tabBarAccessibilityLabel !== undefined ? options.tabBarAccessibilityLabel : typeof label === 'string' ? \"\".concat(label, \", tab, \").concat(index + 1, \" of \").concat(routes.length) : undefined;\n    return /*#__PURE__*/React.createElement(NavigationContext.Provider, {\n      key: route.key,\n      value: descriptors[route.key].navigation\n    }, /*#__PURE__*/React.createElement(NavigationRouteContext.Provider, {\n      value: route\n    }, /*#__PURE__*/React.createElement(BottomTabItem, {\n      route: route,\n      focused: focused,\n      horizontal: hasHorizontalLabels,\n      onPress: onPress,\n      onLongPress: onLongPress,\n      accessibilityLabel: accessibilityLabel,\n      to: buildLink(route.name, route.params),\n      testID: options.tabBarTestID,\n      allowFontScaling: allowFontScaling,\n      activeTintColor: activeTintColor,\n      inactiveTintColor: inactiveTintColor,\n      activeBackgroundColor: activeBackgroundColor,\n      inactiveBackgroundColor: inactiveBackgroundColor,\n      button: options.tabBarButton,\n      icon: options.tabBarIcon,\n      badge: options.tabBarBadge,\n      badgeStyle: options.tabBarBadgeStyle,\n      label: label,\n      showLabel: showLabel,\n      labelStyle: labelStyle,\n      iconStyle: iconStyle,\n      style: tabStyle\n    })));\n  })));\n}\nconst styles = StyleSheet.create({\n  tabBar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    borderTopWidth: StyleSheet.hairlineWidth,\n    elevation: 8\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row'\n  }\n});","map":{"version":3,"sources":["BottomTabBar.tsx"],"names":["DEFAULT_TABBAR_HEIGHT","COMPACT_TABBAR_HEIGHT","DEFAULT_MAX_TAB_ITEM_WIDTH","useNativeDriver","Platform","shouldUseHorizontalLabels","adaptive","tabStyle","labelPosition","layout","maxTabItemWidth","flattenedStyle","StyleSheet","state","dimensions","getPaddingBottom","insets","ios","default","getTabBarHeight","rest","customHeight","isLandscape","horizontalLabels","paddingBottom","keyboardHidesTabBar","colors","useTheme","buildLink","useLinkBuilder","focusedRoute","focusedDescriptor","descriptors","focusedOptions","useWindowDimensions","isKeyboardShown","useIsKeyboardShown","onHeightChange","React","shouldShowTabBar","visibilityAnimationConfigRef","Animated","visibilityAnimationConfig","animation","toValue","duration","finished","setIsTabBarHidden","height","width","handleLayout","e","topBorderWidth","styles","setLayout","routes","defaultInsets","useSafeArea","top","safeAreaInsets","right","bottom","left","tabBarHeight","style","hasHorizontalLabels","backgroundColor","borderTopColor","border","transform","translateY","inputRange","outputRange","position","isTabBarHidden","paddingHorizontal","Math","focused","index","options","route","onPress","event","type","target","canPreventDefault","navigation","CommonActions","key","onLongPress","label","accessibilityLabel","tabBar","borderTopWidth","elevation","content","flex","flexDirection"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  Animated,\n  StyleSheet,\n  Platform,\n  LayoutChangeEvent,\n  StyleProp,\n  ViewStyle,\n} from 'react-native';\nimport {\n  NavigationContext,\n  NavigationRouteContext,\n  TabNavigationState,\n  ParamListBase,\n  CommonActions,\n  useTheme,\n  useLinkBuilder,\n} from '@react-navigation/native';\nimport { useSafeArea, EdgeInsets } from 'react-native-safe-area-context';\n\nimport BottomTabItem from './BottomTabItem';\nimport BottomTabBarHeightCallbackContext from '../utils/BottomTabBarHeightCallbackContext';\nimport useWindowDimensions from '../utils/useWindowDimensions';\nimport useIsKeyboardShown from '../utils/useIsKeyboardShown';\nimport type { BottomTabBarProps, LabelPosition } from '../types';\n\ntype Props = BottomTabBarProps & {\n  activeTintColor?: string;\n  inactiveTintColor?: string;\n};\n\nconst DEFAULT_TABBAR_HEIGHT = 49;\nconst COMPACT_TABBAR_HEIGHT = 32;\nconst DEFAULT_MAX_TAB_ITEM_WIDTH = 125;\n\nconst useNativeDriver = Platform.OS !== 'web';\n\ntype Options = {\n  state: TabNavigationState<ParamListBase>;\n  layout: { height: number; width: number };\n  dimensions: { height: number; width: number };\n  tabStyle: StyleProp<ViewStyle>;\n  labelPosition: LabelPosition | undefined;\n  adaptive: boolean | undefined;\n};\n\nconst shouldUseHorizontalLabels = ({\n  state,\n  layout,\n  dimensions,\n  adaptive = true,\n  labelPosition,\n  tabStyle,\n}: Options) => {\n  if (labelPosition) {\n    return labelPosition === 'beside-icon';\n  }\n\n  if (!adaptive) {\n    return false;\n  }\n\n  if (layout.width >= 768) {\n    // Screen size matches a tablet\n    let maxTabItemWidth = DEFAULT_MAX_TAB_ITEM_WIDTH;\n\n    const flattenedStyle = StyleSheet.flatten(tabStyle);\n\n    if (flattenedStyle) {\n      if (typeof flattenedStyle.width === 'number') {\n        maxTabItemWidth = flattenedStyle.width;\n      } else if (typeof flattenedStyle.maxWidth === 'number') {\n        maxTabItemWidth = flattenedStyle.maxWidth;\n      }\n    }\n\n    return state.routes.length * maxTabItemWidth <= layout.width;\n  } else {\n    return dimensions.width > dimensions.height;\n  }\n};\n\nconst getPaddingBottom = (insets: EdgeInsets) =>\n  Math.max(insets.bottom - Platform.select({ ios: 4, default: 0 }), 0);\n\nexport const getTabBarHeight = ({\n  dimensions,\n  insets,\n  style,\n  ...rest\n}: Options & {\n  insets: EdgeInsets;\n  style: Animated.WithAnimatedValue<StyleProp<ViewStyle>>;\n}) => {\n  // @ts-ignore\n  const customHeight = StyleSheet.flatten(style)?.height;\n\n  if (typeof customHeight === 'number') {\n    return customHeight;\n  }\n\n  const isLandscape = dimensions.width > dimensions.height;\n  const horizontalLabels = shouldUseHorizontalLabels({ dimensions, ...rest });\n  const paddingBottom = getPaddingBottom(insets);\n\n  if (\n    Platform.OS === 'ios' &&\n    !Platform.isPad &&\n    isLandscape &&\n    horizontalLabels\n  ) {\n    return COMPACT_TABBAR_HEIGHT + paddingBottom;\n  }\n\n  return DEFAULT_TABBAR_HEIGHT + paddingBottom;\n};\n\nexport default function BottomTabBar({\n  state,\n  navigation,\n  descriptors,\n  activeBackgroundColor,\n  activeTintColor,\n  adaptive,\n  allowFontScaling,\n  inactiveBackgroundColor,\n  inactiveTintColor,\n  keyboardHidesTabBar = false,\n  labelPosition,\n  labelStyle,\n  iconStyle,\n  safeAreaInsets,\n  showLabel,\n  style,\n  tabStyle,\n}: Props) {\n  const { colors } = useTheme();\n  const buildLink = useLinkBuilder();\n\n  const focusedRoute = state.routes[state.index];\n  const focusedDescriptor = descriptors[focusedRoute.key];\n  const focusedOptions = focusedDescriptor.options;\n\n  const dimensions = useWindowDimensions();\n  const isKeyboardShown = useIsKeyboardShown();\n\n  const onHeightChange = React.useContext(BottomTabBarHeightCallbackContext);\n\n  const shouldShowTabBar =\n    focusedOptions.tabBarVisible !== false &&\n    !(keyboardHidesTabBar && isKeyboardShown);\n\n  const visibilityAnimationConfigRef = React.useRef(\n    focusedOptions.tabBarVisibilityAnimationConfig\n  );\n\n  React.useEffect(() => {\n    visibilityAnimationConfigRef.current =\n      focusedOptions.tabBarVisibilityAnimationConfig;\n  });\n\n  const [isTabBarHidden, setIsTabBarHidden] = React.useState(!shouldShowTabBar);\n\n  const [visible] = React.useState(\n    () => new Animated.Value(shouldShowTabBar ? 1 : 0)\n  );\n\n  React.useEffect(() => {\n    const visibilityAnimationConfig = visibilityAnimationConfigRef.current;\n\n    if (shouldShowTabBar) {\n      const animation =\n        visibilityAnimationConfig?.show?.animation === 'spring'\n          ? Animated.spring\n          : Animated.timing;\n\n      animation(visible, {\n        toValue: 1,\n        useNativeDriver,\n        duration: 250,\n        ...visibilityAnimationConfig?.show?.config,\n      }).start(({ finished }) => {\n        if (finished) {\n          setIsTabBarHidden(false);\n        }\n      });\n    } else {\n      setIsTabBarHidden(true);\n\n      const animation =\n        visibilityAnimationConfig?.hide?.animation === 'spring'\n          ? Animated.spring\n          : Animated.timing;\n\n      animation(visible, {\n        toValue: 0,\n        useNativeDriver,\n        duration: 200,\n        ...visibilityAnimationConfig?.hide?.config,\n      }).start();\n    }\n  }, [visible, shouldShowTabBar]);\n\n  const [layout, setLayout] = React.useState({\n    height: 0,\n    width: dimensions.width,\n  });\n\n  const handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const topBorderWidth =\n      // @ts-ignore\n      StyleSheet.flatten([styles.tabBar, style])?.borderTopWidth;\n\n    onHeightChange?.(\n      height +\n        paddingBottom +\n        (typeof topBorderWidth === 'number' ? topBorderWidth : 0)\n    );\n\n    setLayout((layout) => {\n      if (height === layout.height && width === layout.width) {\n        return layout;\n      } else {\n        return {\n          height,\n          width,\n        };\n      }\n    });\n  };\n\n  const { routes } = state;\n\n  const defaultInsets = useSafeArea();\n\n  const insets = {\n    top: safeAreaInsets?.top ?? defaultInsets.top,\n    right: safeAreaInsets?.right ?? defaultInsets.right,\n    bottom: safeAreaInsets?.bottom ?? defaultInsets.bottom,\n    left: safeAreaInsets?.left ?? defaultInsets.left,\n  };\n\n  const paddingBottom = getPaddingBottom(insets);\n  const tabBarHeight = getTabBarHeight({\n    state,\n    insets,\n    dimensions,\n    layout,\n    adaptive,\n    labelPosition,\n    tabStyle,\n    style,\n  });\n\n  const hasHorizontalLabels = shouldUseHorizontalLabels({\n    state,\n    dimensions,\n    layout,\n    adaptive,\n    labelPosition,\n    tabStyle,\n  });\n\n  return (\n    <Animated.View\n      style={[\n        styles.tabBar,\n        {\n          backgroundColor: colors.card,\n          borderTopColor: colors.border,\n        },\n        {\n          transform: [\n            {\n              translateY: visible.interpolate({\n                inputRange: [0, 1],\n                outputRange: [\n                  layout.height + paddingBottom + StyleSheet.hairlineWidth,\n                  0,\n                ],\n              }),\n            },\n          ],\n          // Absolutely position the tab bar so that the content is below it\n          // This is needed to avoid gap at bottom when the tab bar is hidden\n          position: isTabBarHidden ? 'absolute' : (null as any),\n        },\n        {\n          height: tabBarHeight,\n          paddingBottom,\n          paddingHorizontal: Math.max(insets.left, insets.right),\n        },\n        style,\n      ]}\n      pointerEvents={isTabBarHidden ? 'none' : 'auto'}\n    >\n      <View style={styles.content} onLayout={handleLayout}>\n        {routes.map((route, index) => {\n          const focused = index === state.index;\n          const { options } = descriptors[route.key];\n\n          const onPress = () => {\n            const event = navigation.emit({\n              type: 'tabPress',\n              target: route.key,\n              canPreventDefault: true,\n            });\n\n            if (!focused && !event.defaultPrevented) {\n              navigation.dispatch({\n                ...CommonActions.navigate(route.name),\n                target: state.key,\n              });\n            }\n          };\n\n          const onLongPress = () => {\n            navigation.emit({\n              type: 'tabLongPress',\n              target: route.key,\n            });\n          };\n\n          const label =\n            options.tabBarLabel !== undefined\n              ? options.tabBarLabel\n              : options.title !== undefined\n              ? options.title\n              : route.name;\n\n          const accessibilityLabel =\n            options.tabBarAccessibilityLabel !== undefined\n              ? options.tabBarAccessibilityLabel\n              : typeof label === 'string'\n              ? `${label}, tab, ${index + 1} of ${routes.length}`\n              : undefined;\n\n          return (\n            <NavigationContext.Provider\n              key={route.key}\n              value={descriptors[route.key].navigation}\n            >\n              <NavigationRouteContext.Provider value={route}>\n                <BottomTabItem\n                  route={route}\n                  focused={focused}\n                  horizontal={hasHorizontalLabels}\n                  onPress={onPress}\n                  onLongPress={onLongPress}\n                  accessibilityLabel={accessibilityLabel}\n                  to={buildLink(route.name, route.params)}\n                  testID={options.tabBarTestID}\n                  allowFontScaling={allowFontScaling}\n                  activeTintColor={activeTintColor}\n                  inactiveTintColor={inactiveTintColor}\n                  activeBackgroundColor={activeBackgroundColor}\n                  inactiveBackgroundColor={inactiveBackgroundColor}\n                  button={options.tabBarButton}\n                  icon={options.tabBarIcon}\n                  badge={options.tabBarBadge}\n                  badgeStyle={options.tabBarBadgeStyle}\n                  label={label}\n                  showLabel={showLabel}\n                  labelStyle={labelStyle}\n                  iconStyle={iconStyle}\n                  style={tabStyle}\n                />\n              </NavigationRouteContext.Provider>\n            </NavigationContext.Provider>\n          );\n        })}\n      </View>\n    </Animated.View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  tabBar: {\n    left: 0,\n    right: 0,\n    bottom: 0,\n    borderTopWidth: StyleSheet.hairlineWidth,\n    elevation: 8,\n  },\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}