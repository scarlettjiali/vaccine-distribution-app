{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/huixu/Desktop/Georgia Tech/vaccine-distribution-app/D3Visualization/src/components/MapChart.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, memo } from 'react';\nimport { geoCentroid } from 'd3-geo';\nimport { scaleQuantize } from \"d3-scale\";\nimport { ComposableMap, Geographies, Geography, Marker, Annotation } from 'react-simple-maps';\nimport ReactTooltip from 'react-tooltip';\nimport allStates from '../data/allstates.json'; // reference: https://www.react-simple-maps.io/examples/usa-counties-choropleth-quantize/\n// reference: https://www.react-simple-maps.io/examples/usa-with-state-labels/\n\nconst geoUrl = 'https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json';\nconst offsets = {\n  VT: [50, -8],\n  NH: [34, 2],\n  MA: [30, -1],\n  RI: [28, 2],\n  CT: [35, 10],\n  NJ: [34, 1],\n  DE: [33, 0],\n  MD: [47, 10],\n  DC: [49, 21]\n};\nconst colorScale = scaleQuantize().domain([0, 1000]).range([\"#f9fbfd\", \"#dce7f3\", \"#b0cae5\", \"#92b6db\", \"#6699cc\", \"#578fc7\", \"#3e7cb9\", \"#2f5e8d\", \"#1b3752\"]);\n\nconst MapChart = ({\n  setTooltipContent,\n  setUSState\n}) => {\n  _s();\n\n  const [vaccineData, setVaccineData] = useState(null);\n  useEffect(() => {\n    fetch('https://www.vaccinespotter.org/api/v0/states.json').then(response => response.json()).then(data => setVaccineData({\n      data\n    }));\n  }, []);\n  useEffect(() => {\n    ReactTooltip.rebuild();\n  }, []);\n\n  const handleMouseEnter = (geoId, name) => {\n    const cur = allStates.find(s => s.val === geoId);\n    const stateData = vaccineData.data.find(e => e.code === cur.id);\n    setTooltipContent({\n      name: stateData.name,\n      provider_count: stateData.provider_brand_count,\n      total_provider_count: stateData.store_count,\n      provider_brands: stateData.provider_brands\n    });\n    ReactTooltip.rebuild();\n  };\n\n  const handleClick = geoId => {\n    const cur = allStates.find(s => s.val === geoId);\n    setUSState(cur.id);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ComposableMap, {\n    \"data-tip\": \"\",\n    projection: \"geoAlbersUsa\",\n    children: /*#__PURE__*/_jsxDEV(Geographies, {\n      geography: geoUrl,\n      children: ({\n        geographies\n      }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: geographies.map(geo => {\n          const centroid = geoCentroid(geo);\n          const cur = allStates.find(s => s.val === geo.id);\n          const stateData = vaccineData === null || vaccineData === void 0 ? void 0 : vaccineData.data.find(e => e.code === cur.id);\n          return /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Geography, {\n              stroke: \"#FFF\",\n              geography: geo,\n              fill: \"#DDD\",\n              style: {\n                default: {\n                  fill: colorScale((stateData === null || stateData === void 0 ? void 0 : stateData.store_count) || 0),\n                  outline: 'none'\n                },\n                hover: {\n                  fill: \"#C53030\",\n                  outline: 'none'\n                }\n              },\n              onMouseEnter: () => handleMouseEnter(geo.id, geo.properties.name),\n              onClick: () => handleClick(geo.id),\n              onMouseLeave: () => setTooltipContent(null)\n            }, geo.rsmKey, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"g\", {\n              children: cur && centroid[0] > -160 && centroid[0] < -67 && (Object.keys(offsets).indexOf(cur.id) === -1 ? /*#__PURE__*/_jsxDEV(Marker, {\n                coordinates: centroid,\n                children: /*#__PURE__*/_jsxDEV(\"text\", {\n                  textAnchor: \"left\",\n                  fill: \"#FFF\",\n                  children: cur.id\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 110,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 45\n              }, this) : /*#__PURE__*/_jsxDEV(Annotation, {\n                subject: centroid,\n                dx: offsets[cur.id][0],\n                dy: offsets[cur.id][1],\n                children: /*#__PURE__*/_jsxDEV(\"text\", {\n                  x: 4,\n                  fontSize: 14,\n                  children: cur.id\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 123,\n                  columnNumber: 49\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 118,\n                columnNumber: 45\n              }, this))\n            }, geo.rsmKey + '-name', false, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true);\n        })\n      }, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MapChart, \"58lgkHVjSH2+NyNLe3CEncq73TU=\");\n\n_c = MapChart;\nexport default _c2 = /*#__PURE__*/memo(MapChart);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MapChart\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/huixu/Desktop/Georgia Tech/vaccine-distribution-app/D3Visualization/src/components/MapChart.js"],"names":["useEffect","useState","memo","geoCentroid","scaleQuantize","ComposableMap","Geographies","Geography","Marker","Annotation","ReactTooltip","allStates","geoUrl","offsets","VT","NH","MA","RI","CT","NJ","DE","MD","DC","colorScale","domain","range","MapChart","setTooltipContent","setUSState","vaccineData","setVaccineData","fetch","then","response","json","data","rebuild","handleMouseEnter","geoId","name","cur","find","s","val","stateData","e","code","id","provider_count","provider_brand_count","total_provider_count","store_count","provider_brands","handleClick","geographies","map","geo","centroid","default","fill","outline","hover","properties","rsmKey","Object","keys","indexOf"],"mappings":"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","sourcesContent":["import { useEffect, useState, memo } from 'react';\nimport { geoCentroid } from 'd3-geo';\nimport { scaleQuantize } from \"d3-scale\";\nimport {\n    ComposableMap,\n    Geographies,\n    Geography,\n    Marker,\n    Annotation,\n} from 'react-simple-maps';\nimport ReactTooltip from 'react-tooltip';\nimport allStates from '../data/allstates.json';\n\n\n// reference: https://www.react-simple-maps.io/examples/usa-counties-choropleth-quantize/\n// reference: https://www.react-simple-maps.io/examples/usa-with-state-labels/\nconst geoUrl = 'https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json';\n\nconst offsets = {\n    VT: [50, -8],\n    NH: [34, 2],\n    MA: [30, -1],\n    RI: [28, 2],\n    CT: [35, 10],\n    NJ: [34, 1],\n    DE: [33, 0],\n    MD: [47, 10],\n    DC: [49, 21],\n};\n\nconst colorScale = scaleQuantize()\n    .domain([0, 1000])\n    .range([\n        \"#f9fbfd\",\n        \"#dce7f3\",\n        \"#b0cae5\",\n        \"#92b6db\",\n        \"#6699cc\",\n        \"#578fc7\",\n        \"#3e7cb9\",\n        \"#2f5e8d\",\n        \"#1b3752\"\n    ]);\n\nconst MapChart = ({ setTooltipContent, setUSState }) => {\n    const [vaccineData, setVaccineData] = useState(null);\n    useEffect(() => {\n        fetch('https://www.vaccinespotter.org/api/v0/states.json')\n            .then(response => response.json())\n            .then(data => setVaccineData({data}));\n    }, [])\n\n    useEffect(() => {\n        ReactTooltip.rebuild();\n    }, []);\n\n    const handleMouseEnter = (geoId, name) => {\n        const cur = allStates.find((s) => s.val === geoId);\n        const stateData = vaccineData.data.find((e) => e.code === cur.id)\n        setTooltipContent({\n            name: stateData.name,\n            provider_count: stateData.provider_brand_count,\n            total_provider_count: stateData.store_count,\n            provider_brands: stateData.provider_brands\n        });\n        ReactTooltip.rebuild();\n    };\n\n    const handleClick = (geoId) => {\n        const cur = allStates.find((s) => s.val === geoId);\n        setUSState(cur.id)\n    }\n\n    return (\n        <ComposableMap data-tip=\"\" projection=\"geoAlbersUsa\">\n            <Geographies geography={geoUrl}>\n                {({ geographies }) => (\n                    <>\n                        {geographies.map((geo) => {\n                            const centroid = geoCentroid(geo);\n                            const cur = allStates.find((s) => s.val === geo.id);\n                            const stateData = vaccineData?.data.find((e) => e.code === cur.id)\n                            return (\n                                <>\n                                    <Geography\n                                        key={geo.rsmKey}\n                                        stroke=\"#FFF\"\n                                        geography={geo}\n                                        fill=\"#DDD\"\n                                        style={{\n                                            default: {\n                                                fill: colorScale(stateData?.store_count || 0),\n                                                outline: 'none',\n                                            },\n                                            hover: {\n                                                fill: \"#C53030\",\n                                                outline: 'none',\n                                            }\n                                        }}\n                                        onMouseEnter={() => handleMouseEnter(geo.id, geo.properties.name)}\n                                        onClick={() => handleClick(geo.id)}\n                                        onMouseLeave={() => setTooltipContent(null)}\n                                    />\n                                    <g key={geo.rsmKey + '-name'}>\n                                        {cur &&\n                                        centroid[0] > -160 &&\n                                        centroid[0] < -67 &&\n                                        (Object.keys(offsets).indexOf(cur.id) === -1 ? (\n                                            <Marker coordinates={centroid}>\n                                                <text\n                                                    textAnchor=\"left\"\n                                                    fill=\"#FFF\"\n                                                >\n                                                    {cur.id}\n                                                </text>\n                                            </Marker>\n                                        ) : (\n                                            <Annotation\n                                                subject={centroid}\n                                                dx={offsets[cur.id][0]}\n                                                dy={offsets[cur.id][1]}\n                                            >\n                                                <text x={4} fontSize={14}>\n                                                    {cur.id}\n                                                </text>\n                                            </Annotation>\n                                        ))}\n                                    </g>\n                                </>\n                            );\n                        })}\n                    </>\n                )}\n            </Geographies>\n        </ComposableMap>\n    );\n};\nexport default memo(MapChart);\n"]},"metadata":{},"sourceType":"module"}