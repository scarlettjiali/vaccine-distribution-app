{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/huixu/Desktop/Georgia Tech/vaccine-distribution-app/D3Visualization/src/components/Cases.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport '../App.css';\nimport { scaleQuantize } from \"d3-scale\";\nimport { ComposableMap, Geographies, Geography, ZoomableGroup, Marker, Annotation } from 'react-simple-maps';\nimport allStates from '../data/allstates.json';\nconst geoUrl = 'https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json';\n\nfunction Cases() {\n  _s();\n\n  const [zoom, setZoom] = useState(1);\n  const [state, setUSState] = useState(null);\n  const offsets = {\n    VT: [50, -8],\n    NH: [34, 2],\n    MA: [30, -1],\n    RI: [28, 2],\n    CT: [35, 10],\n    NJ: [34, 1],\n    DE: [33, 0],\n    MD: [47, 10],\n    DC: [49, 21]\n  };\n  useEffect(() => {\n    fetch(\"https://api.covidactnow.org/v2/states.json?apiKey=63f652b7dabd4bdda544b20f5bdb60e7\").then(response => response.json()).then(data => setUSState({\n      data\n    }));\n  }, []);\n  const colorScale = scaleQuantize().domain([0, 1000000]).range([\"#F4F4CC\", \"#E7E3A3\", \"#C3D977\", \"#8BC94C\", \"#44B823\", \"#1EA31C\", \"#168E2F\", \"#11783C\", \"#0C6142\"]);\n  console.log(zoom);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"ZoomBtn\",\n      onClick: () => setZoom(prev => prev + 0.1),\n      children: \"+\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"ZoomBtn\",\n      onClick: () => setZoom(prev => prev - 0.1),\n      children: \"-\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Cases, \"a+/91uU/BBrfgyLj5y5eh4lmwho=\");\n\n_c = Cases;\nexport default Cases;\n\nvar _c;\n\n$RefreshReg$(_c, \"Cases\");","map":{"version":3,"sources":["/Users/huixu/Desktop/Georgia Tech/vaccine-distribution-app/D3Visualization/src/components/Cases.js"],"names":["useState","useEffect","scaleQuantize","ComposableMap","Geographies","Geography","ZoomableGroup","Marker","Annotation","allStates","geoUrl","Cases","zoom","setZoom","state","setUSState","offsets","VT","NH","MA","RI","CT","NJ","DE","MD","DC","fetch","then","response","json","data","colorScale","domain","range","console","log","prev"],"mappings":";;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAmC,OAAnC;AACA,OAAO,YAAP;AACA,SAASC,aAAT,QAA8B,UAA9B;AACA,SACIC,aADJ,EAEIC,WAFJ,EAGIC,SAHJ,EAIIC,aAJJ,EAKIC,MALJ,EAMIC,UANJ,QAOO,mBAPP;AAQA,OAAOC,SAAP,MAAsB,wBAAtB;AAEA,MAAMC,MAAM,GAAG,yDAAf;;AAGA,SAASC,KAAT,GAAiB;AAAA;;AACb,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,CAAD,CAAhC;AAEA,QAAM,CAACc,KAAD,EAAQC,UAAR,IAAsBf,QAAQ,CAAC,IAAD,CAApC;AAEA,QAAMgB,OAAO,GAAG;AACZC,IAAAA,EAAE,EAAE,CAAC,EAAD,EAAK,CAAC,CAAN,CADQ;AAEZC,IAAAA,EAAE,EAAE,CAAC,EAAD,EAAK,CAAL,CAFQ;AAGZC,IAAAA,EAAE,EAAE,CAAC,EAAD,EAAK,CAAC,CAAN,CAHQ;AAIZC,IAAAA,EAAE,EAAE,CAAC,EAAD,EAAK,CAAL,CAJQ;AAKZC,IAAAA,EAAE,EAAE,CAAC,EAAD,EAAK,EAAL,CALQ;AAMZC,IAAAA,EAAE,EAAE,CAAC,EAAD,EAAK,CAAL,CANQ;AAOZC,IAAAA,EAAE,EAAE,CAAC,EAAD,EAAK,CAAL,CAPQ;AAQZC,IAAAA,EAAE,EAAE,CAAC,EAAD,EAAK,EAAL,CARQ;AASZC,IAAAA,EAAE,EAAE,CAAC,EAAD,EAAK,EAAL;AATQ,GAAhB;AAYAxB,EAAAA,SAAS,CAAC,MAAM;AACZyB,IAAAA,KAAK,CAAC,oFAAD,CAAL,CACKC,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAEKF,IAFL,CAEUG,IAAI,IAAIf,UAAU,CAAC;AAACe,MAAAA;AAAD,KAAD,CAF5B;AAGH,GAJQ,EAIN,EAJM,CAAT;AAMA,QAAMC,UAAU,GAAG7B,aAAa,GAC/B8B,MADkB,CACX,CAAC,CAAD,EAAI,OAAJ,CADW,EAElBC,KAFkB,CAEZ,CACH,SADG,EAEH,SAFG,EAGH,SAHG,EAIH,SAJG,EAKH,SALG,EAMH,SANG,EAOH,SAPG,EAQH,SARG,EASH,SATG,CAFY,CAAnB;AAaAC,EAAAA,OAAO,CAACC,GAAR,CAAYvB,IAAZ;AAEA,sBACI;AAAA,4BAkEA;AAAQ,MAAA,SAAS,EAAC,SAAlB;AAA4B,MAAA,OAAO,EAAE,MAAMC,OAAO,CAACuB,IAAI,IAAIA,IAAI,GAAG,GAAhB,CAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAlEA,eAqEF;AAAQ,MAAA,SAAS,EAAC,SAAlB;AAA4B,MAAA,OAAO,EAAE,MAAMvB,OAAO,CAACuB,IAAI,IAAIA,IAAI,GAAG,GAAhB,CAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YArEE;AAAA,kBADJ;AA4EH;;GAlHQzB,K;;KAAAA,K;AAoHT,eAAeA,KAAf","sourcesContent":["import { useState, useEffect} from 'react';\nimport '../App.css';\nimport { scaleQuantize } from \"d3-scale\";\nimport {\n    ComposableMap,\n    Geographies,\n    Geography,\n    ZoomableGroup,\n    Marker,\n    Annotation,\n} from 'react-simple-maps';\nimport allStates from '../data/allstates.json';\n\nconst geoUrl = 'https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json';\n\n\nfunction Cases() {\n    const [zoom, setZoom] = useState(1)\n\n    const [state, setUSState] = useState(null);\n    \n    const offsets = {\n        VT: [50, -8],\n        NH: [34, 2],\n        MA: [30, -1],\n        RI: [28, 2],\n        CT: [35, 10],\n        NJ: [34, 1],\n        DE: [33, 0],\n        MD: [47, 10],\n        DC: [49, 21],\n    };\n\n    useEffect(() => {\n        fetch(\"https://api.covidactnow.org/v2/states.json?apiKey=63f652b7dabd4bdda544b20f5bdb60e7\")\n            .then(response => response.json())\n            .then(data => setUSState({data}));\n    }, []);\n   \n    const colorScale = scaleQuantize()\n    .domain([0, 1000000])\n    .range([\n        \"#F4F4CC\",\n        \"#E7E3A3\",\n        \"#C3D977\",\n        \"#8BC94C\",\n        \"#44B823\",\n        \"#1EA31C\",\n        \"#168E2F\",\n        \"#11783C\",\n        \"#0C6142\",\n    ]);\n    console.log(zoom)\n\n    return (\n        <>\n        {/* <ComposableMap data-tip=\"\" projection=\"geoAlbersUsa\">\n            <ZoomableGroup {...{ zoom }}>\n           <Geographies geography={geoUrl}>\n                {({ geographies }) => (\n                    <>\n                        {geographies.map((geo) => {\n                            const cur = allStates.find((s) => s.val === geo.id);\n                            const stateData = state?.data.find((e) => e.state === cur.id)\n                            // console.log(\"key---\",stateData)\n                            return (   \n                                <>\n                                \n                                    <Geography\n                                        key={geo.rsmKey}\n                                        stroke=\"#FFF\"\n                                        geography={geo}\n                                        fill=\"#DDD\"\n                                        style={{\n                                            default: {\n                                                fill: colorScale(stateData?.actuals.cases),\n                                                outline: 'none',\n                                            },\n                                            hover: {\n                                                fill: \"#C53030\",\n                                                outline: 'none',\n                                            }\n                                        }}\n                                        // onMouseEnter={() => handleMouseEnter(geo.id, geo.properties.name)}\n                                        // onClick={() => handleClick(geo.id)}\n                                        // onMouseLeave={() => setTooltipContent(null)}\n                                    />\n                                    <g key={geo.rsmKey + '-name'}>\n                                        {cur &&\n                                        geo.id[0] > -160 &&\n                                        geo.id[0] < -67 &&\n                                        (Object.keys(offsets).indexOf(cur.id) === -1 ? (\n                                            <Marker coordinates={geo.id}>\n                                                <text\n                                                    textAnchor=\"left\"\n                                                    fill=\"#FFF\"\n                                                >\n                                                    {cur.id}\n                                                </text>\n                                            </Marker>\n                                        ) : (\n                                            <Annotation\n                                                subject={geo.id}\n                                                dx={offsets[cur.id][0]}\n                                                dy={offsets[cur.id][1]}\n                                            >\n                                                <text x={4} fontSize={14}>\n                                                    {cur.id}\n                                                </text>\n                                            </Annotation>\n                                        ))}\n                                    </g>\n                                </>\n                            );\n                        })} \n                    </>\n                )} \n                \n            </Geographies>\n            </ZoomableGroup>\n        </ComposableMap> */}\n        <button className=\"ZoomBtn\" onClick={() => setZoom(prev => prev + 0.1)}>\n        +\n      </button>\n      <button className=\"ZoomBtn\" onClick={() => setZoom(prev => prev - 0.1)}>\n        -\n      </button>\n      </>\n        \n    );\n}\n\nexport default Cases;\n"]},"metadata":{},"sourceType":"module"}