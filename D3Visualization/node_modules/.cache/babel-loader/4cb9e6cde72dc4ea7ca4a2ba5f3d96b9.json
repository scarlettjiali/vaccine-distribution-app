{"ast":null,"code":"import * as React from 'react';\nimport { Dimensions } from 'react-native'; // This is similar to the new useWindowDimensions hook in react-native\n// However, we have a custom implementation to support older RN versions\n\nexport default function useWindowDimensions() {\n  const [dimensions, setDimensions] = React.useState(() => {\n    // `height` and `width` maybe undefined during SSR, so we initialize them\n    const {\n      height = 0,\n      width = 0\n    } = Dimensions.get('window');\n    return {\n      height,\n      width\n    };\n  });\n  React.useEffect(() => {\n    const onChange = ({\n      window\n    }) => {\n      const {\n        width,\n        height\n      } = window;\n      setDimensions(d => {\n        if (width === d.width && height === d.height) {\n          return d;\n        }\n\n        return {\n          width,\n          height\n        };\n      });\n    }; // We might have missed an update before the listener was added\n    // So make sure to update the dimensions\n\n\n    onChange({\n      window: Dimensions.get('window')\n    });\n    Dimensions.addEventListener('change', onChange);\n    return () => Dimensions.removeEventListener('change', onChange);\n  }, []);\n  return dimensions;\n}","map":{"version":3,"sources":["useWindowDimensions.tsx"],"names":["height","width","Dimensions","React","onChange","window","setDimensions","d"],"mappings":"AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,UAAA,QAAA,cAAA,C,CAEA;AACA;;AACA,eAAe,SAAA,mBAAA,GAA+B;AAC5C,QAAM,CAAA,UAAA,EAAA,aAAA,IAA8B,KAAK,CAAL,QAAA,CAAe,MAAM;AACvD;AACA,UAAM;AAAEA,MAAAA,MAAM,GAAR,CAAA;AAAcC,MAAAA,KAAK,GAAG;AAAtB,QAA4BC,UAAU,CAAVA,GAAAA,CAAlC,QAAkCA,CAAlC;AAEA,WAAO;AAAA,MAAA,MAAA;AAAUD,MAAAA;AAAV,KAAP;AAJF,GAAoC,CAApC;AAOAE,EAAAA,KAAK,CAALA,SAAAA,CAAgB,MAAM;AACpB,UAAMC,QAAQ,GAAG,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAAwC;AACvD,YAAM;AAAA,QAAA,KAAA;AAASL,QAAAA;AAAT,UAAN,MAAA;AAEAM,MAAAA,aAAa,CAAEC,CAAD,IAAO;AACnB,YAAIN,KAAK,KAAKM,CAAC,CAAXN,KAAAA,IAAqBD,MAAM,KAAKO,CAAC,CAArC,MAAA,EAA8C;AAC5C,iBAAA,CAAA;AACD;;AAED,eAAO;AAAA,UAAA,KAAA;AAASP,UAAAA;AAAT,SAAP;AALFM,OAAa,CAAbA;AAJkB,KACpB,CADoB,CAapB;AACA;;;AACAF,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,MAAM,EAAEH,UAAU,CAAVA,GAAAA,CAAAA,QAAAA;AAAV,KAAD,CAARE;AAEAF,IAAAA,UAAU,CAAVA,gBAAAA,CAAAA,QAAAA,EAAAA,QAAAA;AAEA,WAAO,MAAMA,UAAU,CAAVA,mBAAAA,CAAAA,QAAAA,EAAb,QAAaA,CAAb;AAnBFC,GAAAA,EAAAA,EAAAA;AAsBA,SAAA,UAAA;AACD","sourcesContent":["import * as React from 'react';\nimport { ScaledSize, Dimensions } from 'react-native';\n\n// This is similar to the new useWindowDimensions hook in react-native\n// However, we have a custom implementation to support older RN versions\nexport default function useWindowDimensions() {\n  const [dimensions, setDimensions] = React.useState(() => {\n    // `height` and `width` maybe undefined during SSR, so we initialize them\n    const { height = 0, width = 0 } = Dimensions.get('window');\n\n    return { height, width };\n  });\n\n  React.useEffect(() => {\n    const onChange = ({ window }: { window: ScaledSize }) => {\n      const { width, height } = window;\n\n      setDimensions((d) => {\n        if (width === d.width && height === d.height) {\n          return d;\n        }\n\n        return { width, height };\n      });\n    };\n\n    // We might have missed an update before the listener was added\n    // So make sure to update the dimensions\n    onChange({ window: Dimensions.get('window') });\n\n    Dimensions.addEventListener('change', onChange);\n\n    return () => Dimensions.removeEventListener('change', onChange);\n  }, []);\n\n  return dimensions;\n}\n"]},"metadata":{},"sourceType":"module"}