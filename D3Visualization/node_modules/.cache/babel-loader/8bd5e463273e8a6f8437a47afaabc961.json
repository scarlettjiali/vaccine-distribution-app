{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/huixu/Desktop/Georgia Tech/vaccine-distribution-app/D3Visualization/src/components/MapChart.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState, memo } from 'react';\nimport { geoCentroid } from 'd3-geo';\nimport { ComposableMap, Geographies, Geography, Marker, Annotation } from 'react-simple-maps';\nimport ReactTooltip from 'react-tooltip';\nimport allStates from '../data/allstates.json';\nimport * as constants from '../constants';\nconst geoUrl = 'https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json';\nconst offsets = {\n  VT: [50, -8],\n  NH: [34, 2],\n  MA: [30, -1],\n  RI: [28, 2],\n  CT: [35, 10],\n  NJ: [34, 1],\n  DE: [33, 0],\n  MD: [47, 10],\n  DC: [49, 21]\n};\n\nconst MapChart = ({\n  setTooltipContent,\n  setUSState\n}) => {\n  _s();\n\n  const [vaccineData, setVaccineData] = useState(null);\n  useEffect(() => {\n    fetch('https://www.vaccinespotter.org/api/v0/states.json').then(response => response.json()).then(data => setVaccineData({\n      data\n    }));\n  }, []);\n  useEffect(() => {\n    ReactTooltip.rebuild(); // ??  for styles??\n  }, []);\n\n  const handleMouseEnter = (geoId, name) => {\n    const cur = allStates.find(s => s.val === geoId);\n    const stateData = vaccineData.data.find(e => e.code === cur.id);\n    setTooltipContent({\n      name: stateData.name,\n      provider_count: stateData.provider_brand_count,\n      total_provider_count: stateData.store_count,\n      provider_brands: stateData.provider_brands\n    });\n    ReactTooltip.rebuild();\n  };\n\n  const handleClick = geoId => {\n    const cur = allStates.find(s => s.val === geoId);\n    setUSState(cur.id); // TX, CA\n  };\n\n  return /*#__PURE__*/_jsxDEV(ComposableMap, {\n    \"data-tip\": \"\",\n    projection: \"geoAlbersUsa\",\n    children: /*#__PURE__*/_jsxDEV(Geographies, {\n      geography: geoUrl,\n      children: ({\n        geographies\n      }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [geographies.map(geo => /*#__PURE__*/_jsxDEV(Geography, {\n          stroke: \"#FFF\",\n          geography: geo,\n          fill: \"#DDD\",\n          style: {\n            default: {\n              fill: constants.BLUE,\n              outline: 'none'\n            },\n            hover: {\n              fill: constants.RED,\n              outline: 'none'\n            },\n            pressed: {\n              fill: constants.RED,\n              outline: 'none'\n            }\n          },\n          onMouseEnter: () => handleMouseEnter(geo.id, geo.properties.name),\n          onClick: () => handleClick(geo.id),\n          onMouseLeave: () => setTooltipContent(null)\n        }, geo.rsmKey, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 15\n        }, this)), geographies.map(geo => {\n          const centroid = geoCentroid(geo);\n          const cur = allStates.find(s => s.val === geo.id);\n          return /*#__PURE__*/_jsxDEV(\"g\", {\n            children: cur && centroid[0] > -168 && centroid[0] < -67 && (Object.keys(offsets).indexOf(cur.id) === -1 ? /*#__PURE__*/_jsxDEV(Marker, {\n              coordinates: centroid,\n              children: /*#__PURE__*/_jsxDEV(\"text\", {\n                y: \"2\",\n                fontSize: 14,\n                textAnchor: \"left\",\n                fill: \"#FFF\",\n                children: cur.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 23\n            }, this) : /*#__PURE__*/_jsxDEV(Annotation, {\n              subject: centroid,\n              dx: offsets[cur.id][0],\n              dy: offsets[cur.id][1],\n              children: /*#__PURE__*/_jsxDEV(\"text\", {\n                x: 4,\n                fontSize: 14,\n                children: cur.id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 25\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 23\n            }, this))\n          }, geo.rsmKey + '-name', false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, this);\n        })]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MapChart, \"58lgkHVjSH2+NyNLe3CEncq73TU=\");\n\n_c = MapChart;\nexport default _c2 = /*#__PURE__*/memo(MapChart);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MapChart\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/huixu/Desktop/Georgia Tech/vaccine-distribution-app/D3Visualization/src/components/MapChart.js"],"names":["useEffect","useState","memo","geoCentroid","ComposableMap","Geographies","Geography","Marker","Annotation","ReactTooltip","allStates","constants","geoUrl","offsets","VT","NH","MA","RI","CT","NJ","DE","MD","DC","MapChart","setTooltipContent","setUSState","vaccineData","setVaccineData","fetch","then","response","json","data","rebuild","handleMouseEnter","geoId","name","cur","find","s","val","stateData","e","code","id","provider_count","provider_brand_count","total_provider_count","store_count","provider_brands","handleClick","geographies","map","geo","default","fill","BLUE","outline","hover","RED","pressed","properties","rsmKey","centroid","Object","keys","indexOf"],"mappings":"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","sourcesContent":["import { useEffect, useState, memo } from 'react';\nimport { geoCentroid } from 'd3-geo';\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n  Annotation,\n} from 'react-simple-maps';\nimport ReactTooltip from 'react-tooltip';\nimport allStates from '../data/allstates.json';\nimport * as constants from '../constants';\n\nconst geoUrl = 'https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json';\n\nconst offsets = {\n  VT: [50, -8],\n  NH: [34, 2],\n  MA: [30, -1],\n  RI: [28, 2],\n  CT: [35, 10],\n  NJ: [34, 1],\n  DE: [33, 0],\n  MD: [47, 10],\n  DC: [49, 21],\n};\n\nconst MapChart = ({ setTooltipContent, setUSState }) => {\n  const [vaccineData, setVaccineData] = useState(null);\n  useEffect(() => {\n    fetch('https://www.vaccinespotter.org/api/v0/states.json')\n      .then(response => response.json())\n      .then(data => setVaccineData({data}));\n  }, [])\n\n  useEffect(() => {\n    ReactTooltip.rebuild(); // ??  for styles??\n  }, []);\n\n  const handleMouseEnter = (geoId, name) => {\n    const cur = allStates.find((s) => s.val === geoId);\n    const stateData = vaccineData.data.find((e) => e.code === cur.id)\n    setTooltipContent({\n      name: stateData.name,\n      provider_count: stateData.provider_brand_count,\n      total_provider_count: stateData.store_count,\n      provider_brands: stateData.provider_brands\n    });\n    ReactTooltip.rebuild();\n  };\n\n  const handleClick = (geoId) => {\n    const cur = allStates.find((s) => s.val === geoId);\n    setUSState(cur.id) // TX, CA\n  }\n\n  return (\n    <ComposableMap data-tip=\"\" projection=\"geoAlbersUsa\">\n      <Geographies geography={geoUrl}>\n        {({ geographies }) => (\n          <>\n            {geographies.map((geo) => (\n              <Geography\n                key={geo.rsmKey}\n                stroke=\"#FFF\"\n                geography={geo}\n                fill=\"#DDD\"\n                style={{\n                  default: {\n                    fill: constants.BLUE,\n                    outline: 'none',\n                  },\n                  hover: {\n                    fill: constants.RED,\n                    outline: 'none',\n                  },\n                  pressed: {\n                    fill: constants.RED,\n                    outline: 'none',\n                  },\n                }}\n                onMouseEnter={() => handleMouseEnter(geo.id, geo.properties.name)}\n                onClick={() => handleClick(geo.id)}\n                onMouseLeave={() => setTooltipContent(null)}\n              />\n            ))}\n            {geographies.map((geo) => {\n              const centroid = geoCentroid(geo);\n              const cur = allStates.find((s) => s.val === geo.id);\n              return (\n                <g key={geo.rsmKey + '-name'}>\n                  {cur &&\n                    centroid[0] > -168 &&\n                    centroid[0] < -67 &&\n                    (Object.keys(offsets).indexOf(cur.id) === -1 ? (\n                      <Marker coordinates={centroid}>\n                        <text\n                          y=\"2\"\n                          fontSize={14}\n                          textAnchor=\"left\"\n                          fill=\"#FFF\"\n                        >\n                          {cur.id}\n                        </text>\n                      </Marker>\n                    ) : (\n                      <Annotation\n                        subject={centroid}\n                        dx={offsets[cur.id][0]}\n                        dy={offsets[cur.id][1]}\n                      >\n                        <text x={4} fontSize={14}>\n                          {cur.id}\n                        </text>\n                      </Annotation>\n                    ))}\n                </g>\n              );\n            })}\n          </>\n        )}\n      </Geographies>\n    </ComposableMap>\n  );\n};\nexport default memo(MapChart);\n"]},"metadata":{},"sourceType":"module"}