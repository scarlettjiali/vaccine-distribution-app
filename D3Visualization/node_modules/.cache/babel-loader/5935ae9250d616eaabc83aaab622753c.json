{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport React from 'react';\nimport { View, Text, TouchableWithoutFeedback, StyleSheet, Platform } from 'react-native';\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport TabBarIcon from './TabBarIcon';\nexport default function BottomTabBarItem({\n  focused,\n  route,\n  label,\n  icon,\n  badge,\n  badgeStyle,\n  to,\n  button = ({\n    children,\n    style,\n    onPress,\n    to,\n    accessibilityRole,\n    ...rest\n  }) => {\n    if (Platform.OS === 'web' && to) {\n      // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\n      // We need to use `onClick` to be able to prevent default browser handling of links.\n      return /*#__PURE__*/React.createElement(Link, _extends({}, rest, {\n        to: to,\n        style: [styles.button, style],\n        onPress: e => {\n          if (!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && ( // ignore clicks with modifier keys\n          e.button == null || e.button === 0) // ignore everything but left clicks\n          ) {\n              e.preventDefault();\n              onPress === null || onPress === void 0 ? void 0 : onPress(e);\n            }\n        }\n      }), children);\n    } else {\n      return /*#__PURE__*/React.createElement(TouchableWithoutFeedback, _extends({}, rest, {\n        accessibilityRole: accessibilityRole,\n        onPress: onPress\n      }), /*#__PURE__*/React.createElement(View, {\n        style: style\n      }, children));\n    }\n  },\n  accessibilityLabel,\n  testID,\n  onPress,\n  onLongPress,\n  horizontal,\n  activeTintColor: customActiveTintColor,\n  inactiveTintColor: customInactiveTintColor,\n  activeBackgroundColor = 'transparent',\n  inactiveBackgroundColor = 'transparent',\n  showLabel = true,\n  allowFontScaling,\n  labelStyle,\n  iconStyle,\n  style\n}) {\n  const {\n    colors\n  } = useTheme();\n  const activeTintColor = customActiveTintColor === undefined ? colors.primary : customActiveTintColor;\n  const inactiveTintColor = customInactiveTintColor === undefined ? Color(colors.text).mix(Color(colors.card), 0.5).hex() : customInactiveTintColor;\n\n  const renderLabel = ({\n    focused\n  }) => {\n    if (showLabel === false) {\n      return null;\n    }\n\n    const color = focused ? activeTintColor : inactiveTintColor;\n\n    if (typeof label === 'string') {\n      return /*#__PURE__*/React.createElement(Text, {\n        numberOfLines: 1,\n        style: [styles.label, {\n          color\n        }, horizontal ? styles.labelBeside : styles.labelBeneath, labelStyle],\n        allowFontScaling: allowFontScaling\n      }, label);\n    }\n\n    return label({\n      focused,\n      color,\n      position: horizontal ? 'beside-icon' : 'below-icon'\n    });\n  };\n\n  const renderIcon = ({\n    focused\n  }) => {\n    if (icon === undefined) {\n      return null;\n    }\n\n    const activeOpacity = focused ? 1 : 0;\n    const inactiveOpacity = focused ? 0 : 1;\n    return /*#__PURE__*/React.createElement(TabBarIcon, {\n      route: route,\n      horizontal: horizontal,\n      badge: badge,\n      badgeStyle: badgeStyle,\n      activeOpacity: activeOpacity,\n      inactiveOpacity: inactiveOpacity,\n      activeTintColor: activeTintColor,\n      inactiveTintColor: inactiveTintColor,\n      renderIcon: icon,\n      style: iconStyle\n    });\n  };\n\n  const scene = {\n    route,\n    focused\n  };\n  const backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n  return button({\n    to,\n    onPress,\n    onLongPress,\n    testID,\n    accessibilityLabel,\n    accessibilityRole: 'button',\n    accessibilityState: {\n      selected: focused\n    },\n    // @ts-expect-error: keep for compatibility with older React Native versions\n    accessibilityStates: focused ? ['selected'] : [],\n    style: [styles.tab, {\n      backgroundColor\n    }, horizontal ? styles.tabLandscape : styles.tabPortrait, style],\n    children: /*#__PURE__*/React.createElement(React.Fragment, null, renderIcon(scene), renderLabel(scene))\n  });\n}\nconst styles = StyleSheet.create({\n  tab: {\n    flex: 1,\n    alignItems: 'center'\n  },\n  tabPortrait: {\n    justifyContent: 'flex-end',\n    flexDirection: 'column'\n  },\n  tabLandscape: {\n    justifyContent: 'center',\n    flexDirection: 'row'\n  },\n  label: {\n    textAlign: 'center',\n    backgroundColor: 'transparent'\n  },\n  labelBeneath: {\n    fontSize: 10\n  },\n  labelBeside: {\n    fontSize: 13,\n    marginLeft: 20,\n    marginTop: 3\n  },\n  button: {\n    display: 'flex'\n  }\n});","map":{"version":3,"sources":["BottomTabItem.tsx"],"names":["button","rest","Platform","styles","e","onPress","style","activeTintColor","inactiveTintColor","activeBackgroundColor","inactiveBackgroundColor","showLabel","colors","useTheme","customActiveTintColor","customInactiveTintColor","Color","renderLabel","focused","color","horizontal","allowFontScaling","label","position","renderIcon","icon","activeOpacity","inactiveOpacity","iconStyle","scene","backgroundColor","accessibilityRole","accessibilityState","selected","accessibilityStates","children","tab","flex","alignItems","tabPortrait","justifyContent","flexDirection","tabLandscape","textAlign","labelBeneath","fontSize","labelBeside","marginLeft","marginTop","display"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {\n  View,\n  Text,\n  TouchableWithoutFeedback,\n  StyleSheet,\n  Platform,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  GestureResponderEvent,\n} from 'react-native';\nimport { Link, Route, useTheme } from '@react-navigation/native';\nimport Color from 'color';\n\nimport TabBarIcon from './TabBarIcon';\nimport type { BottomTabBarButtonProps, LabelPosition } from '../types';\n\ntype Props = {\n  /**\n   * Whether the tab is focused.\n   */\n  focused: boolean;\n  /**\n   * The route object which should be specified by the tab.\n   */\n  route: Route<string>;\n  /**\n   * The label text of the tab.\n   */\n  label:\n    | string\n    | ((props: {\n        focused: boolean;\n        color: string;\n        position: LabelPosition;\n      }) => React.ReactNode);\n  /**\n   * Icon to display for the tab.\n   */\n  icon?: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Text to show in a badge on the tab icon.\n   */\n  badge?: number | string;\n  /**\n   * Custom style for the badge.\n   */\n  badgeStyle?: StyleProp<TextStyle>;\n  /**\n   * URL to use for the link to the tab.\n   */\n  to?: string;\n  /**\n   * The button for the tab. Uses a `TouchableWithoutFeedback` by default.\n   */\n  button?: (props: BottomTabBarButtonProps) => React.ReactNode;\n  /**\n   * The accessibility label for the tab.\n   */\n  accessibilityLabel?: string;\n  /**\n   * An unique ID for testing for the tab.\n   */\n  testID?: string;\n  /**\n   * Function to execute on press in React Native.\n   * On the web, this will use onClick.\n   */\n  onPress: (\n    e: React.MouseEvent<HTMLElement, MouseEvent> | GestureResponderEvent\n  ) => void;\n  /**\n   * Function to execute on long press.\n   */\n  onLongPress: (e: GestureResponderEvent) => void;\n  /**\n   * Whether the label should be aligned with the icon horizontally.\n   */\n  horizontal: boolean;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Whether to show the label text for the tab.\n   */\n  showLabel?: boolean;\n  /**\n   * Whether to allow scaling the font for the label for accessibility purposes.\n   */\n  allowFontScaling?: boolean;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the icon element.\n   */\n  iconStyle?: StyleProp<ViewStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\nexport default function BottomTabBarItem({\n  focused,\n  route,\n  label,\n  icon,\n  badge,\n  badgeStyle,\n  to,\n  button = ({\n    children,\n    style,\n    onPress,\n    to,\n    accessibilityRole,\n    ...rest\n  }: BottomTabBarButtonProps) => {\n    if (Platform.OS === 'web' && to) {\n      // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\n      // We need to use `onClick` to be able to prevent default browser handling of links.\n      return (\n        <Link\n          {...rest}\n          to={to}\n          style={[styles.button, style]}\n          onPress={(e: any) => {\n            if (\n              !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n              (e.button == null || e.button === 0) // ignore everything but left clicks\n            ) {\n              e.preventDefault();\n              onPress?.(e);\n            }\n          }}\n        >\n          {children}\n        </Link>\n      );\n    } else {\n      return (\n        <TouchableWithoutFeedback\n          {...rest}\n          accessibilityRole={accessibilityRole}\n          onPress={onPress}\n        >\n          <View style={style}>{children}</View>\n        </TouchableWithoutFeedback>\n      );\n    }\n  },\n  accessibilityLabel,\n  testID,\n  onPress,\n  onLongPress,\n  horizontal,\n  activeTintColor: customActiveTintColor,\n  inactiveTintColor: customInactiveTintColor,\n  activeBackgroundColor = 'transparent',\n  inactiveBackgroundColor = 'transparent',\n  showLabel = true,\n  allowFontScaling,\n  labelStyle,\n  iconStyle,\n  style,\n}: Props) {\n  const { colors } = useTheme();\n\n  const activeTintColor =\n    customActiveTintColor === undefined\n      ? colors.primary\n      : customActiveTintColor;\n\n  const inactiveTintColor =\n    customInactiveTintColor === undefined\n      ? Color(colors.text).mix(Color(colors.card), 0.5).hex()\n      : customInactiveTintColor;\n\n  const renderLabel = ({ focused }: { focused: boolean }) => {\n    if (showLabel === false) {\n      return null;\n    }\n\n    const color = focused ? activeTintColor : inactiveTintColor;\n\n    if (typeof label === 'string') {\n      return (\n        <Text\n          numberOfLines={1}\n          style={[\n            styles.label,\n            { color },\n            horizontal ? styles.labelBeside : styles.labelBeneath,\n            labelStyle,\n          ]}\n          allowFontScaling={allowFontScaling}\n        >\n          {label}\n        </Text>\n      );\n    }\n\n    return label({\n      focused,\n      color,\n      position: horizontal ? 'beside-icon' : 'below-icon',\n    });\n  };\n\n  const renderIcon = ({ focused }: { focused: boolean }) => {\n    if (icon === undefined) {\n      return null;\n    }\n\n    const activeOpacity = focused ? 1 : 0;\n    const inactiveOpacity = focused ? 0 : 1;\n\n    return (\n      <TabBarIcon\n        route={route}\n        horizontal={horizontal}\n        badge={badge}\n        badgeStyle={badgeStyle}\n        activeOpacity={activeOpacity}\n        inactiveOpacity={inactiveOpacity}\n        activeTintColor={activeTintColor}\n        inactiveTintColor={inactiveTintColor}\n        renderIcon={icon}\n        style={iconStyle}\n      />\n    );\n  };\n\n  const scene = { route, focused };\n\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  return button({\n    to,\n    onPress,\n    onLongPress,\n    testID,\n    accessibilityLabel,\n    accessibilityRole: 'button',\n    accessibilityState: { selected: focused },\n    // @ts-expect-error: keep for compatibility with older React Native versions\n    accessibilityStates: focused ? ['selected'] : [],\n    style: [\n      styles.tab,\n      { backgroundColor },\n      horizontal ? styles.tabLandscape : styles.tabPortrait,\n      style,\n    ],\n    children: (\n      <React.Fragment>\n        {renderIcon(scene)}\n        {renderLabel(scene)}\n      </React.Fragment>\n    ),\n  }) as React.ReactElement;\n}\n\nconst styles = StyleSheet.create({\n  tab: {\n    flex: 1,\n    alignItems: 'center',\n  },\n  tabPortrait: {\n    justifyContent: 'flex-end',\n    flexDirection: 'column',\n  },\n  tabLandscape: {\n    justifyContent: 'center',\n    flexDirection: 'row',\n  },\n  label: {\n    textAlign: 'center',\n    backgroundColor: 'transparent',\n  },\n  labelBeneath: {\n    fontSize: 10,\n  },\n  labelBeside: {\n    fontSize: 13,\n    marginLeft: 20,\n    marginTop: 3,\n  },\n  button: {\n    display: 'flex',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}