{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/huixu/Desktop/Georgia Tech/vaccine-distribution-app/D3Visualization/src/components/Vaccination.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, Suspense } from 'react';\nimport ReactTooltip from 'react-tooltip';\nimport MapChart from './MapChart';\nimport '../App.css';\nimport { ComposableMap, Geographies, Geography, Marker, Annotation } from 'react-simple-maps';\nimport LocationCard from \"./LocationCard\";\nconst geoUrl = 'https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json';\n\nfunction Vaccination() {\n  _s();\n\n  // const [content, setContent] = useState(null);\n  const [state, setUSState] = useState(null); // const [vender, setVender] = useState(null);\n\n  useEffect(() => {\n    fetch(\"https://api.covidactnow.org/v2/states.json?apiKey=63f652b7dabd4bdda544b20f5bdb60e7\").then(response => response.json()).then(data => setUSState({\n      data\n    }));\n  }, []);\n  console.log(\"-----\", state);\n  const colorScale = scaleQuantize().domain([0, 1000]).range([\"#f9fbfd\", \"#dce7f3\", \"#b0cae5\", \"#92b6db\", \"#6699cc\", \"#578fc7\", \"#3e7cb9\", \"#2f5e8d\", \"#1b3752\"]);\n  return /*#__PURE__*/_jsxDEV(ComposableMap, {\n    \"data-tip\": \"\",\n    projection: \"geoAlbersUsa\",\n    children: /*#__PURE__*/_jsxDEV(Geographies, {\n      geography: geoUrl,\n      children: ({\n        geographies\n      }) => /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: geographies.map(geo => {\n          var _stateData;\n\n          console.log(\"geo---\", geo); // const centroid = geoCentroid(geo);\n          // console.log(\"___++\",centroid)\n          // const cur = allStates.find((s) => s.val === geo.id);\n          // const stateData = vaccineData?.data.find((e) => e.code === cur.id)\n\n          return /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(Geography, {\n              stroke: \"#FFF\",\n              geography: geo,\n              fill: \"#DDD\",\n              style: {\n                default: {\n                  fill: colorScale(((_stateData = stateData) === null || _stateData === void 0 ? void 0 : _stateData.store_count) || 0),\n                  outline: 'none'\n                },\n                hover: {\n                  fill: \"#C53030\",\n                  outline: 'none'\n                }\n              },\n              onMouseEnter: () => handleMouseEnter(geo.id, geo.properties.name),\n              onClick: () => handleClick(geo.id),\n              onMouseLeave: () => setTooltipContent(null)\n            }, geo.rsmKey, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 37\n            }, this)\n          }, void 0, false);\n        })\n      }, void 0, false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 12\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Vaccination, \"i1OLr2bbLHaU08mtSQf4y98fsYw=\");\n\n_c = Vaccination;\nexport default Vaccination;\n\nvar _c;\n\n$RefreshReg$(_c, \"Vaccination\");","map":{"version":3,"sources":["/Users/huixu/Desktop/Georgia Tech/vaccine-distribution-app/D3Visualization/src/components/Vaccination.js"],"names":["useState","useEffect","Suspense","ReactTooltip","MapChart","ComposableMap","Geographies","Geography","Marker","Annotation","LocationCard","geoUrl","Vaccination","state","setUSState","fetch","then","response","json","data","console","log","colorScale","scaleQuantize","domain","range","geographies","map","geo","default","fill","stateData","store_count","outline","hover","handleMouseEnter","id","properties","name","handleClick","setTooltipContent","rsmKey"],"mappings":";;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,QAA9B,QAA8C,OAA9C;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAO,YAAP;AACA,SACIC,aADJ,EAEIC,WAFJ,EAGIC,SAHJ,EAIIC,MAJJ,EAKIC,UALJ,QAMO,mBANP;AAOA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,MAAMC,MAAM,GAAG,yDAAf;;AAGA,SAASC,WAAT,GAAuB;AAAA;;AACnB;AACA,QAAM,CAACC,KAAD,EAAQC,UAAR,IAAsBd,QAAQ,CAAC,IAAD,CAApC,CAFmB,CAGnB;;AAIAC,EAAAA,SAAS,CAAC,MAAM;AACZc,IAAAA,KAAK,CAAC,oFAAD,CAAL,CACKC,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,EAEKF,IAFL,CAEUG,IAAI,IAAIL,UAAU,CAAC;AAACK,MAAAA;AAAD,KAAD,CAF5B;AAGH,GAJQ,EAIN,EAJM,CAAT;AAKAC,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBR,KAApB;AACA,QAAMS,UAAU,GAAGC,aAAa,GAC/BC,MADkB,CACX,CAAC,CAAD,EAAI,IAAJ,CADW,EAElBC,KAFkB,CAEZ,CACH,SADG,EAEH,SAFG,EAGH,SAHG,EAIH,SAJG,EAKH,SALG,EAMH,SANG,EAOH,SAPG,EAQH,SARG,EASH,SATG,CAFY,CAAnB;AAaA,sBACI,QAAC,aAAD;AAAe,gBAAS,EAAxB;AAA2B,IAAA,UAAU,EAAC,cAAtC;AAAA,2BACG,QAAC,WAAD;AAAa,MAAA,SAAS,EAAEd,MAAxB;AAAA,gBACM,CAAC;AAAEe,QAAAA;AAAF,OAAD,kBACG;AAAA,kBAEKA,WAAW,CAACC,GAAZ,CAAiBC,GAAD,IAAS;AAAA;;AACtBR,UAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAqBO,GAArB,EADsB,CAGtB;AACA;AACA;AACA;;AACA,8BAEI;AAAA,mCACI,QAAC,SAAD;AAEI,cAAA,MAAM,EAAC,MAFX;AAGI,cAAA,SAAS,EAAEA,GAHf;AAII,cAAA,IAAI,EAAC,MAJT;AAKI,cAAA,KAAK,EAAE;AACHC,gBAAAA,OAAO,EAAE;AACLC,kBAAAA,IAAI,EAAER,UAAU,CAAC,eAAAS,SAAS,UAAT,gDAAWC,WAAX,KAA0B,CAA3B,CADX;AAELC,kBAAAA,OAAO,EAAE;AAFJ,iBADN;AAKHC,gBAAAA,KAAK,EAAE;AACHJ,kBAAAA,IAAI,EAAE,SADH;AAEHG,kBAAAA,OAAO,EAAE;AAFN;AALJ,eALX;AAeI,cAAA,YAAY,EAAE,MAAME,gBAAgB,CAACP,GAAG,CAACQ,EAAL,EAASR,GAAG,CAACS,UAAJ,CAAeC,IAAxB,CAfxC;AAgBI,cAAA,OAAO,EAAE,MAAMC,WAAW,CAACX,GAAG,CAACQ,EAAL,CAhB9B;AAiBI,cAAA,YAAY,EAAE,MAAMI,iBAAiB,CAAC,IAAD;AAjBzC,eACSZ,GAAG,CAACa,MADb;AAAA;AAAA;AAAA;AAAA;AADJ,2BAFJ;AAiDH,SAxDA;AAFL;AAFT;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAAA,UADJ;AAoEH;;GA9FQ7B,W;;KAAAA,W;AAgGT,eAAeA,WAAf","sourcesContent":["import { useState, useEffect, Suspense } from 'react';\nimport ReactTooltip from 'react-tooltip';\nimport MapChart from './MapChart';\nimport '../App.css';\nimport {\n    ComposableMap,\n    Geographies,\n    Geography,\n    Marker,\n    Annotation,\n} from 'react-simple-maps';\nimport LocationCard from \"./LocationCard\";\nconst geoUrl = 'https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json';\n\n\nfunction Vaccination() {\n    // const [content, setContent] = useState(null);\n    const [state, setUSState] = useState(null);\n    // const [vender, setVender] = useState(null);\n\n    \n\n    useEffect(() => {\n        fetch(\"https://api.covidactnow.org/v2/states.json?apiKey=63f652b7dabd4bdda544b20f5bdb60e7\")\n            .then(response => response.json())\n            .then(data => setUSState({data}));\n    }, []);\n    console.log(\"-----\",state)\n    const colorScale = scaleQuantize()\n    .domain([0, 1000])\n    .range([\n        \"#f9fbfd\",\n        \"#dce7f3\",\n        \"#b0cae5\",\n        \"#92b6db\",\n        \"#6699cc\",\n        \"#578fc7\",\n        \"#3e7cb9\",\n        \"#2f5e8d\",\n        \"#1b3752\"\n    ]);\n    return (\n        <ComposableMap data-tip=\"\" projection=\"geoAlbersUsa\">\n           <Geographies geography={geoUrl}>\n                {({ geographies }) => (\n                    <>\n                    \n                        {geographies.map((geo) => {\n                            console.log(\"geo---\",geo)\n                            \n                            // const centroid = geoCentroid(geo);\n                            // console.log(\"___++\",centroid)\n                            // const cur = allStates.find((s) => s.val === geo.id);\n                            // const stateData = vaccineData?.data.find((e) => e.code === cur.id)\n                            return (\n                                \n                                <>\n                                    <Geography\n                                        key={geo.rsmKey}\n                                        stroke=\"#FFF\"\n                                        geography={geo}\n                                        fill=\"#DDD\"\n                                        style={{\n                                            default: {\n                                                fill: colorScale(stateData?.store_count || 0),\n                                                outline: 'none',\n                                            },\n                                            hover: {\n                                                fill: \"#C53030\",\n                                                outline: 'none',\n                                            }\n                                        }}\n                                        onMouseEnter={() => handleMouseEnter(geo.id, geo.properties.name)}\n                                        onClick={() => handleClick(geo.id)}\n                                        onMouseLeave={() => setTooltipContent(null)}\n                                    />\n                                    {/* <g key={geo.rsmKey + '-name'}>\n                                        {cur &&\n                                        centroid[0] > -160 &&\n                                        centroid[0] < -67 &&\n                                        (Object.keys(offsets).indexOf(cur.id) === -1 ? (\n                                            <Marker coordinates={centroid}>\n                                                <text\n                                                    textAnchor=\"left\"\n                                                    fill=\"#FFF\"\n                                                >\n                                                    {cur.id}\n                                                </text>\n                                            </Marker>\n                                        ) : (\n                                            <Annotation\n                                                subject={centroid}\n                                                dx={offsets[cur.id][0]}\n                                                dy={offsets[cur.id][1]}\n                                            >\n                                                <text x={4} fontSize={14}>\n                                                    {cur.id}\n                                                </text>\n                                            </Annotation>\n                                        ))}\n                                    </g> */}\n                                </>\n                            );\n                        })} \n                    </>\n                )} \n            </Geographies>\n        </ComposableMap>\n    );\n}\n\nexport default Vaccination;\n"]},"metadata":{},"sourceType":"module"}