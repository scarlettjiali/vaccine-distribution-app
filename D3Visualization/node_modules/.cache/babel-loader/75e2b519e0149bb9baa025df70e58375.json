{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/jl_s/Gatech/2021Spring/6242/TeamProject/vaccine-distribution-app/D3Visualization/src/components/LocalVaccineMap.js\",\n    _s = $RefreshSig$();\n\n// reference: https://codesandbox.io/s/v653jj6oz3?file=/src/index.js\nimport React, { useState } from \"react\";\nimport { ComposableMap, Geographies, Geography, Marker, ZoomableGroup } from \"react-simple-maps\";\nimport { geoPath } from \"d3-geo\";\nimport { geoTimes } from \"d3-geo-projection\"; // const geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\n\nconst LocalVaccineMap = ({\n  storeData\n}) => {\n  _s();\n\n  const [zoom, setZoom] = useState(1);\n  const [center, setCenter] = useState([0, 0]);\n  const markers = storeData.map((store, i) => {\n    var _store$properties;\n\n    return {\n      markerOffset: 0,\n      name: (_store$properties = store.properties) === null || _store$properties === void 0 ? void 0 : _store$properties.name,\n      coordinates: [store.geometry.coordinates[0], store.geometry.coordinates[1]]\n    };\n  });\n\n  const projection = () => {\n    return geoTimes().translate([800 / 2, 450 / 2]).scale(160);\n  };\n\n  const handleGeographyClick = (geography, event) => {\n    const path = geoPath().projection(projection());\n    const centroid = projection().invert(path.centroid(geography));\n    setCenter(centroid);\n    setZoom(4);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ComposableMap, {\n      projection: \"geoAlbersUsa\",\n      children: /*#__PURE__*/_jsxDEV(ZoomableGroup, {\n        center: center,\n        zoom: zoom,\n        children: [/*#__PURE__*/_jsxDEV(Geographies, {\n          geography: geoUrl,\n          children: ({\n            geographies\n          }) => geographies.map(geo => /*#__PURE__*/_jsxDEV(Geography, {\n            geography: geo,\n            fill: \"#EEE\",\n            onClick: () => handleGeographyClick(geo, this)\n          }, geo.rsmKey, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 33\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), markers.map(({\n          name,\n          coordinates,\n          markerOffset\n        }) => /*#__PURE__*/_jsxDEV(Marker, {\n          coordinates: coordinates,\n          children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n            r: 3,\n            fill: \"#F00\",\n            stroke: \"#fff\",\n            strokeWidth: 0.5\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n            textAnchor: \"middle\",\n            y: markerOffset,\n            style: {\n              fontFamily: \"system-ui\",\n              fontSize: \"5px\",\n              fill: \"#5D5A6D\"\n            },\n            children: name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 29\n          }, this)]\n        }, coordinates[0], true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 25\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(LocalVaccineMap, \"Tyo9nLVJrId9Uyd/yLW5EVLulJk=\");\n\n_c = LocalVaccineMap;\nexport default LocalVaccineMap;\n\nvar _c;\n\n$RefreshReg$(_c, \"LocalVaccineMap\");","map":{"version":3,"sources":["/Users/jl_s/Gatech/2021Spring/6242/TeamProject/vaccine-distribution-app/D3Visualization/src/components/LocalVaccineMap.js"],"names":["React","useState","ComposableMap","Geographies","Geography","Marker","ZoomableGroup","geoPath","geoTimes","geoUrl","LocalVaccineMap","storeData","zoom","setZoom","center","setCenter","markers","map","store","i","markerOffset","name","properties","coordinates","geometry","projection","translate","scale","handleGeographyClick","geography","event","path","centroid","invert","geographies","geo","rsmKey","fontFamily","fontSize","fill"],"mappings":"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","sourcesContent":["// reference: https://codesandbox.io/s/v653jj6oz3?file=/src/index.js\n\nimport React, { useState } from \"react\";\nimport {\n    ComposableMap,\n    Geographies,\n    Geography,\n    Marker,\n    ZoomableGroup\n} from \"react-simple-maps\";\nimport { geoPath } from \"d3-geo\";\nimport { geoTimes } from \"d3-geo-projection\";\n\n// const geoUrl = \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\n\nconst LocalVaccineMap = ({ storeData }) => {\n    const [zoom, setZoom] = useState(1);\n    const [center, setCenter] = useState([0, 0]);\n\n    const markers = storeData.map((store, i) => {\n        return {\n            markerOffset: 0,\n            name: store.properties?.name,\n            coordinates: [store.geometry.coordinates[0], store.geometry.coordinates[1]]\n        }\n    })\n\n    const projection = () => {\n        return geoTimes()\n            .translate([800 / 2, 450 / 2])\n            .scale(160);\n    };\n\n    const handleGeographyClick = (geography, event) => {\n        const path = geoPath().projection(projection());\n        const centroid = projection().invert(path.centroid(geography));\n        setCenter(centroid);\n        setZoom(4);\n    };\n\n    return (\n        <>\n            <ComposableMap projection=\"geoAlbersUsa\">\n                <ZoomableGroup center={center} zoom={zoom}>\n                    <Geographies geography={geoUrl}>\n                        {({ geographies }) =>\n                            geographies.map(geo => (\n                                <Geography key={geo.rsmKey} geography={geo} fill=\"#EEE\" onClick={() => handleGeographyClick(geo, this)} />\n                            ))\n                        }\n                    </Geographies>\n                    {markers.map(({ name, coordinates, markerOffset }) => (\n                        <Marker key={coordinates[0]} coordinates={coordinates}>\n                            <circle r={3} fill=\"#F00\" stroke=\"#fff\" strokeWidth={0.5} />\n                            <text\n                                textAnchor=\"middle\"\n                                y={markerOffset}\n                                style={{ fontFamily: \"system-ui\", fontSize: \"5px\", fill: \"#5D5A6D\" }}\n                            >\n                                {name}\n                            </text>\n                        </Marker>\n                    ))}\n                </ZoomableGroup>\n            </ComposableMap>\n        </>\n    );\n};\n\nexport default LocalVaccineMap;\n"]},"metadata":{},"sourceType":"module"}