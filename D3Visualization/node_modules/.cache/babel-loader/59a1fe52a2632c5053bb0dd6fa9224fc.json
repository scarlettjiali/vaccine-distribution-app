{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { Animated, StyleSheet } from 'react-native';\nimport color from 'color';\nimport { useTheme } from '@react-navigation/native';\nexport default function Badge({\n  visible = true,\n  size = 18,\n  children,\n  style,\n  ...rest\n}) {\n  const [opacity] = React.useState(() => new Animated.Value(visible ? 1 : 0));\n  const [rendered, setRendered] = React.useState(visible ? true : false);\n  const theme = useTheme();\n  React.useEffect(() => {\n    if (!rendered) {\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue: visible ? 1 : 0,\n      duration: 150,\n      useNativeDriver: true\n    }).start(({\n      finished\n    }) => {\n      if (finished && !visible) {\n        setRendered(false);\n      }\n    });\n  }, [opacity, rendered, visible]);\n\n  if (visible && !rendered) {\n    setRendered(true);\n  }\n\n  if (!visible && !rendered) {\n    return null;\n  } // @ts-expect-error: backgroundColor definitely exists\n\n\n  const {\n    backgroundColor = theme.colors.notification,\n    ...restStyle\n  } = StyleSheet.flatten(style) || {};\n  const textColor = color(backgroundColor).isLight() ? 'black' : 'white';\n  const borderRadius = size / 2;\n  const fontSize = Math.floor(size * 3 / 4);\n  return /*#__PURE__*/React.createElement(Animated.Text, _extends({\n    numberOfLines: 1,\n    style: [{\n      opacity,\n      transform: [{\n        scale: opacity.interpolate({\n          inputRange: [0, 1],\n          outputRange: [0.5, 1]\n        })\n      }],\n      backgroundColor,\n      color: textColor,\n      fontSize,\n      lineHeight: size - 1,\n      height: size,\n      minWidth: size,\n      borderRadius\n    }, styles.container, restStyle]\n  }, rest), children);\n}\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden'\n  }\n});","map":{"version":3,"sources":["Badge.tsx"],"names":["visible","size","rest","React","Animated","theme","useTheme","toValue","duration","useNativeDriver","finished","setRendered","backgroundColor","restStyle","StyleSheet","textColor","color","borderRadius","fontSize","Math","transform","scale","inputRange","outputRange","lineHeight","height","minWidth","styles","container","alignSelf","textAlign","paddingHorizontal","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Animated, StyleSheet, StyleProp, TextStyle } from 'react-native';\nimport color from 'color';\nimport { useTheme } from '@react-navigation/native';\n\ntype Props = {\n  /**\n   * Whether the badge is visible\n   */\n  visible: boolean;\n  /**\n   * Content of the `Badge`.\n   */\n  children?: string | number;\n  /**\n   * Size of the `Badge`.\n   */\n  size?: number;\n  /**\n   * Style object for the tab bar container.\n   */\n  style?: Animated.WithAnimatedValue<StyleProp<TextStyle>>;\n};\n\nexport default function Badge({\n  visible = true,\n  size = 18,\n  children,\n  style,\n  ...rest\n}: Props) {\n  const [opacity] = React.useState(() => new Animated.Value(visible ? 1 : 0));\n  const [rendered, setRendered] = React.useState(visible ? true : false);\n\n  const theme = useTheme();\n\n  React.useEffect(() => {\n    if (!rendered) {\n      return;\n    }\n\n    Animated.timing(opacity, {\n      toValue: visible ? 1 : 0,\n      duration: 150,\n      useNativeDriver: true,\n    }).start(({ finished }) => {\n      if (finished && !visible) {\n        setRendered(false);\n      }\n    });\n  }, [opacity, rendered, visible]);\n\n  if (visible && !rendered) {\n    setRendered(true);\n  }\n\n  if (!visible && !rendered) {\n    return null;\n  }\n\n  // @ts-expect-error: backgroundColor definitely exists\n  const { backgroundColor = theme.colors.notification, ...restStyle } =\n    StyleSheet.flatten(style) || {};\n  const textColor = color(backgroundColor).isLight() ? 'black' : 'white';\n\n  const borderRadius = size / 2;\n  const fontSize = Math.floor((size * 3) / 4);\n\n  return (\n    <Animated.Text\n      numberOfLines={1}\n      style={[\n        {\n          opacity,\n          transform: [\n            {\n              scale: opacity.interpolate({\n                inputRange: [0, 1],\n                outputRange: [0.5, 1],\n              }),\n            },\n          ],\n          backgroundColor,\n          color: textColor,\n          fontSize,\n          lineHeight: size - 1,\n          height: size,\n          minWidth: size,\n          borderRadius,\n        },\n        styles.container,\n        restStyle,\n      ]}\n      {...rest}\n    >\n      {children}\n    </Animated.Text>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    alignSelf: 'flex-end',\n    textAlign: 'center',\n    paddingHorizontal: 4,\n    overflow: 'hidden',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}